<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java并发-AQS</title>
      <link href="/2020/03/10/java-bing-fa-aqs/"/>
      <url>/2020/03/10/java-bing-fa-aqs/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>AQS 全称为(AbstractQueuedSynchronizer), AQS 是一个用来构建锁和同步器的框架，使用 AQS 能简单且高效地构建出大量的同步器。</p><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>AQS 核心思想是，如果被请求的共享资源空闲，则将当前请求资源的线程设置为有效的工作线程，并且将共享资源设置为锁定状态。如果被请求的共享资源被占用，那么就需要一套线程阻塞等待以及被唤醒时锁分配的机制，这个机制 AQS 是用 CLH 队列锁实现的，即将暂时获取不到锁的线程加入到队列中。</p><p>CLH(Craig,Landin,and Hagersten)队列是一个虚拟的双向队列（虚拟的双向队列即不存在队列实例，仅存在结点之间的关联关系）。AQS 是将每条请求共享资源的线程封装成一个 CLH 锁队列的一个结点（Node）来实现锁的分配。</p><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/AQS-01.jpg" alt=""></p><h4 id="AQS-组件"><a href="#AQS-组件" class="headerlink" title="AQS 组件"></a>AQS 组件</h4><h5 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h5><p>用来控制一个线程等待多个线程，维护了一个计数器 cnt，每次调用 countDown()方法会让计数器的值减 1，减到 0 的时候，那些应为调用 await()方法而在等待的线程就会被唤醒</p><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/CountDownLatch1.jpg" alt=""></p><pre><code>public class CountdownLatchExample {    public static void main(String[] args) throws InterruptedException {        ExecutorService executorService = Executors.newCachedThreadPool();        CountDownLatch countDownLatch = new CountDownLatch(10);        for (int i = 0; i &lt; 10; i++) {            executorService.execute(() -&gt; {                System.out.print("run...");                countDownLatch.countDown();            });        }        countDownLatch.await();        System.out.print("end..");        executorService.shutdown();    }}// run...run...run...run...run...run...run...run...run...run...end..</code></pre><h4 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h4><p>用来控制多个线程互相等待，只有当多个线程都到达时，这些线程才会继续执行。和 CountDownLatch 相似，都是通过维护计数器实现的。线程执行 await()方法之后计数器会减 1，并进行等待，直到计数器为 0，所有调用 await()方法而在等待的线程才能继续执行。</p><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/CyclicBarrierExample.jpg" alt=""></p><pre><code>public class CyclicBarrierExample {    public static void main(String[] args) {        CyclicBarrier cyclicBarrier = new CyclicBarrier(10);        ExecutorService executorService = Executors.newCachedThreadPool();        for (int i = 0; i &lt; 10; i++) {            executorService.execute(() -&gt; {                System.out.print("before...");                try {                    cyclicBarrier.await();                } catch (InterruptedException e) {                    e.printStackTrace();                } catch (BrokenBarrierException e) {                    e.printStackTrace();                }                System.out.print("after...");            });        }        executorService.shutdown();    }}// before...before...before...before...before...before...before...before...before...before...after...after...after...after...after...after...after...after...after...after...</code></pre><h4 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h4><p>Semaphore 可以控制对互斥资源的访问线程数</p><p>以下模拟了对某个服务的并发请求，每次只能有 3 个客户端同时访问，请求总数为 10.</p><pre><code>public class SemaphoreExample {    public static void main(String[] args) {        Semaphore semaphore = new Semaphore(3);        ExecutorService executorService = Executors.newCachedThreadPool();        for (int i = 0; i &lt; 10; i++) {            executorService.execute(() -&gt; {                try {                    semaphore.acquire();                    System.out.print(semaphore.availablePermits() + " ");                } catch (InterruptedException e) {                    e.printStackTrace();                }finally {                    semaphore.release();                }            });        }        executorService.shutdown();    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发-ThreadLocal</title>
      <link href="/2020/03/09/java-bing-fa-threadlocal/"/>
      <url>/2020/03/09/java-bing-fa-threadlocal/</url>
      
        <content type="html"><![CDATA[<h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>通常情况下，我们创建的变量是可以被任何一个线程访问并修改的。如果想实现每一个线程都有自己的专属本地变量该如何解决呢？ JDK 中提供的 ThreadLocal 类正是为了解决这样的问题。 ThreadLocal 类主要解决的就是让每个线程绑定自己的值，可以将 ThreadLocal 类形象的比喻成存放数据的盒子，盒子中可以存储每个线程的私有数据</p><p>如果你创建了一个 ThreadLocal 变量，那么访问这个变量的每个线程都会有这个变量的本地副本，这也是 ThreadLocal 变量名的由来。他们可以使用 get()和 set() 方法来获取默认值或将其值更改为当前线程所存的副本的值，从而避免了线程安全问题。</p><p>比如有两个人去宝屋收集宝物，这两个共用一个袋子的话肯定会产生争执，但是给他们两个人每个人分配一个袋子的话就不会出现这样的问题。如果把这两个人比作线程的话，那么 ThreadLocal 就是用来避免这两个线程竞争的。</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadLocalTest</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// SimpleDateFormat 不是线程安全的，所以每个线程都要有自己独立的副本</span>    <span class="token comment" spellcheck="true">// 等同于一下代码</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> ThreadLocal<span class="token operator">&lt;</span>SimpleDateFormat<span class="token operator">></span> formatter <span class="token operator">=</span> ThreadLocal<span class="token punctuation">.</span><span class="token function">withInitial</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//    private static final ThreadLocal&lt;SimpleDateFormat> formatter = new ThreadLocal&lt;SimpleDateFormat>(){</span><span class="token comment" spellcheck="true">//        @Override</span><span class="token comment" spellcheck="true">//        protected SimpleDateFormat initialValue() {</span><span class="token comment" spellcheck="true">//            return new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");</span><span class="token comment" spellcheck="true">//        }</span><span class="token comment" spellcheck="true">//    };</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>        ThreadLocalTest obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocalTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            Thread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">""</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Name= "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" default Formatter = "</span><span class="token operator">+</span>formatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//formatter pattern is changed here by thread, but it won't reflect to other threads</span>        formatter<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyyMMddHHmmss"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread Name= "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" formatter = "</span><span class="token operator">+</span>formatter<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toPattern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p>ThreadLocal 内部维护的是一个类似 Map 的 ThreadLocalMap 数据结构，key 为当前对象的 Thread 对象，值为 Object 对象</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发-线程池</title>
      <link href="/2020/03/01/java-bing-fa-xian-cheng-chi/"/>
      <url>/2020/03/01/java-bing-fa-xian-cheng-chi/</url>
      
        <content type="html"><![CDATA[<h4 id="线程池的优点"><a href="#线程池的优点" class="headerlink" title="线程池的优点"></a>线程池的优点</h4><ol><li>降低资源消耗</li><li>提高响应速度</li><li>提供线程可管理性</li></ol><h4 id="Executor-框架"><a href="#Executor-框架" class="headerlink" title="Executor 框架"></a>Executor 框架</h4><p>Executor 框架是 Java5 之后引进的，通过 Executor 来启动线程与使用 Thread 的 start 方法更好，易于管理，效率更好</p><h5 id="Executor-框架接口-三大部分"><a href="#Executor-框架接口-三大部分" class="headerlink" title="Executor 框架接口(三大部分)"></a>Executor 框架接口(三大部分)</h5><ol><li>任务(Runnable、Callable)</li></ol><p>执行任务需要实现的<code>Runnable</code>接口或<code>Callable</code>接口。Runnable 接口或 Callable 接口 实现类都可以被 ThreadPoolExecutor 或 ScheduledThreadPoolExecutor 执行</p><ol start="2"><li>任务的执行(Executor)</li></ol><p>任务执行的核心为 Executor 和 ExecutorService 接口， ThreadPoolExecutor 和 ScheduledThreadPoolExecutor 两个关键的实现类</p><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/123.jpg" alt=""></p><ol start="3"><li>异步计算的结果(Future)</li></ol><p>Future 接口以及 Future 接口的实现类 FutureTask 类可以代表异步计算的接口。当我们把 Runnable 和 Callable 接口的实现类提交给 ThreadPoolExecutor 或 ScheduledThreadPoolExecutor 执行。调用 submit() 方法会返回一个 FutureTask 对象</p><h5 id="Executor-框架的使用"><a href="#Executor-框架的使用" class="headerlink" title="Executor 框架的使用"></a>Executor 框架的使用</h5><ol><li>主线程首先要创建 Runnable 或者 Callable 接口的任务对象</li><li>把创建的任务对象交给 ExecutorService 执行</li></ol><pre class=" language-java"><code class="language-java">ExecutorService<span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span>Runnable command<span class="token punctuation">)</span><span class="token punctuation">;</span>Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Callable<span class="token operator">&lt;</span>T<span class="token operator">></span> task<span class="token punctuation">)</span><span class="token punctuation">;</span>Future<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">submit</span><span class="token punctuation">(</span>Runnable task<span class="token punctuation">,</span> T result<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ol start="3"><li>ExecutorService.submit() 将返回一个实现 Future 接口的对象 FutureTask</li><li>FutureTask.get()方法来等待任务执行完成，主线程也可以执行 FutureTask.cancel()来取消任务的执行</li></ol><h4 id="ThreadPoolExecutor-类"><a href="#ThreadPoolExecutor-类" class="headerlink" title="ThreadPoolExecutor 类"></a>ThreadPoolExecutor 类</h4><p>线程池实现类 ThreadPoolExecutor 是 Executor 框架最核心的类</p><h5 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h5><pre><code>public ThreadPoolExecutor(int corePoolSize,  // 线程池的核心线程数量                          int maximumPoolSize, // 线程池的最大线程数                          long keepAliveTime, // 当线程数大于核心线程数时，多余的空闲线程存活的最长时间                          TimeUnit unit, // 时间单位                          BlockingQueue&lt;Runnable&gt; workQueue, // 任务队列，用来存储等待执行任务的队列                          ThreadFactory threadFactory, // 线程工厂，用来创建线程，一般默认即可                          RejectedExecutionHandler handler) { // 拒接策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务    if (corePoolSize &lt; 0 ||        maximumPoolSize &lt;= 0 ||        maximumPoolSize &lt; corePoolSize ||        keepAliveTime &lt; 0)        throw new IllegalArgumentException();    if (workQueue == null || threadFactory == null || handler == null)        throw new NullPointerException();    this.corePoolSize = corePoolSize;    this.maximumPoolSize = maximumPoolSize;    this.workQueue = workQueue;    this.keepAliveTime = unit.toNanos(keepAliveTime);    this.threadFactory = threadFactory;    this.handler = handler;}</code></pre><p>ThreadPoolExecutor 参数</p><ul><li>corePoolSize : 核心线程数线程数定义了最小可以同时运行的线程数量。</li><li>maximumPoolSize : 当队列中存放的任务达到队列容量的时候，当前可以同时运行的线程数量变为最大线程数。</li><li>workQueue: 当新任务来的时候会先判断当前运行的线程数量是否达到核心线程数，如果达到的话，信任就会被存放在队列中。</li><li>keepAliveTime:当线程池中的线程数量大于 corePoolSize 的时候，如果这时没有新的任务提交，核心线程外的线程不会立即销毁，而是会等待，直到等待的时间超过了 keepAliveTime 才会被回收销毁；</li><li>unit : keepAliveTime 参数的时间单位。</li><li>threadFactory :executor 创建新线程的时候会用到。</li><li>handler :饱和策略。关于饱和策略下面单独介绍一下。</li></ul><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/124.jpg" alt=""></p><h4 id="饱和策略"><a href="#饱和策略" class="headerlink" title="饱和策略"></a>饱和策略</h4><p>如果当前同时运行的线程数量达到最大线程数量并且队列也已经被放满了任务时</p><ul><li>ThreadPoolExecutor.AbortPolicy: 抛出 RejectedExecutionException 来拒接新任务的处理</li><li>ThreadPoolExecutor.CallerRunsPolicy：调用执行自己的线程运行任务，也就是直接在调用 execute 方法的线程中运行(run)被拒绝的任务，如果执行程序已关闭，则会丢弃该任务。因此这种策略会降低对于新任务提交速度，影响程序的整体性能。另外，这个策略喜欢增加队列容量。如果您的应用程序可以承受此延迟并且你不能任务丢弃任何一个任务请求的话，你可以选择这个策略。</li><li>ThreadPoolExecutor.DiscardPolicy： 不处理新任务，直接丢弃掉。</li><li>ThreadPoolExecutor.DiscardOldestPolicy： 此策略将丢弃最早的未处理的任务请求。</li></ul><blockquote><p>Spring 通过 ThreadPoolTaskExecutor 或者我们直接通过 ThreadPoolExecutor 的构造函数创建线程池的时候，当我们不指定 RejectedExecutionHandler 饱和策略的话来配置线程池的时候默认使用的是 ThreadPoolExecutor.AbortPolicy。在默认情况下，ThreadPoolExecutor 将抛出 RejectedExecutionException 来拒绝新来的任务 ，这代表你将丢失对这个任务的处理。 对于可伸缩的应用程序，建议使用 ThreadPoolExecutor.CallerRunsPolicy。当最大池被填满时，此策略为我们提供可伸缩队列。</p></blockquote><h4 id="使用-ThreadPoolExecutor-构造函数创建线程池"><a href="#使用-ThreadPoolExecutor-构造函数创建线程池" class="headerlink" title="使用 ThreadPoolExecutor 构造函数创建线程池"></a>使用 ThreadPoolExecutor 构造函数创建线程池</h4><h5 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h5><p>使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源开销，解决资源不足的问题。如果不使用线程池，有可能会造成系统创建大量同类线程而导致消耗完内存或者“过度切换”的问题</p><p>不允许使用 Executors 去创建线程池，而是通过 ThreadPoolExecutor 构造函数去创建，规避资源耗尽的风险</p><ul><li>FixedThreadPool 和 SingleThreadExecutor ： 允许请求的队列长度为 Integer.MAX_VALUE,可能堆积大量的请求，从而导致 OOM。</li><li>CachedThreadPool 和 ScheduledThreadPool ： 允许创建的线程数量为 Integer.MAX_VALUE ，可能会创建大量线程，从而导致 OOM。</li></ul><h4 id="ThreadPoolExecutor-简单使用"><a href="#ThreadPoolExecutor-简单使用" class="headerlink" title="ThreadPoolExecutor 简单使用"></a>ThreadPoolExecutor 简单使用</h4><pre><code>public class ThreadPoolExecutorDemo {    private static final int CORE_POOL_SIZE = 5;    private static final int MAX_POOL_SIZE = 10;    private static final int QUEUE_CAPACITY = 100;    private static final Long KEEP_ALIVE_TIME = 1L;    public static void main(String[] args) {        ThreadPoolExecutor executor = new ThreadPoolExecutor(                CORE_POOL_SIZE,                MAX_POOL_SIZE,                KEEP_ALIVE_TIME,                TimeUnit.SECONDS,                new ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),                new ThreadPoolExecutor.CallerRunsPolicy()        );        for (int i = 0; i &lt; 10; i++) {            Runnable worker = new MyRunnable("" + i);            executor.execute(worker);        }        executor.shutdown();        while(!executor.isTerminated()){        }        System.out.println("Finished all threads");    }}</code></pre><pre><code>public class MyRunnable implements Runnable{    private String command;    public MyRunnable(String s){        this.command = s;    }    @Override    public void run() {        System.out.println(Thread.currentThread().getName() + "Start. Time = " + new Date());        processCommand();        System.out.println(Thread.currentThread().getName() + "End. Time = " + new Date());    }    private void processCommand(){        try {            Thread.sleep(5000);        } catch (InterruptedException e) {            e.printStackTrace();        }    }    @Override    public String toString() {        return super.toString();    }}</code></pre><pre><code>pool-1-thread-1Start. Time = Sun Mar 01 11:06:55 CST 2020pool-1-thread-3Start. Time = Sun Mar 01 11:06:55 CST 2020pool-1-thread-2Start. Time = Sun Mar 01 11:06:55 CST 2020pool-1-thread-4Start. Time = Sun Mar 01 11:06:55 CST 2020pool-1-thread-5Start. Time = Sun Mar 01 11:06:55 CST 2020pool-1-thread-1End. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-1Start. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-3End. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-3Start. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-2End. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-2Start. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-4End. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-4Start. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-5End. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-5Start. Time = Sun Mar 01 11:07:01 CST 2020pool-1-thread-1End. Time = Sun Mar 01 11:07:06 CST 2020pool-1-thread-3End. Time = Sun Mar 01 11:07:06 CST 2020pool-1-thread-2End. Time = Sun Mar 01 11:07:06 CST 2020pool-1-thread-4End. Time = Sun Mar 01 11:07:06 CST 2020pool-1-thread-5End. Time = Sun Mar 01 11:07:06 CST 2020Finished all threads</code></pre><h5 id="ThreadPoolExecutor-简单原理"><a href="#ThreadPoolExecutor-简单原理" class="headerlink" title="ThreadPoolExecutor 简单原理"></a>ThreadPoolExecutor 简单原理</h5><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/TIM%E6%88%AA%E5%9B%BE20200301123108.jpg" alt=""></p><h4 id="Runnable-VS-Callable"><a href="#Runnable-VS-Callable" class="headerlink" title="Runnable VS Callable"></a>Runnable VS Callable</h4><ul><li>Runnable 不会返回结果或抛出检查异常，Callable 可以</li><li>Executors 可以实现 Runnable 和 Callable 对象之间的转换</li></ul><h4 id="execute-VS-submit"><a href="#execute-VS-submit" class="headerlink" title="execute() VS submit()"></a>execute() VS submit()</h4><ul><li>execute()方法用于提交不需要返回值的任务，所以无法判断任务是否被线程池执行成功与否</li><li>submit()方法用于提交需要返回值的任务。线程池会返回一个 Future 类型的对象，通过这个 Future 对象可以判断任务是否执行成功，并且可以通过 Future 的 get()方法来获取返回值，get()方法会阻塞当前线程直到任务完成，而使用 get（long timeout，TimeUnit unit）方法则会阻塞当前线程一段时间后立即返回，这时候有可能任务没有执行完。</li></ul><h4 id="shutdown-VS-shutdownNow"><a href="#shutdown-VS-shutdownNow" class="headerlink" title="shutdown() VS shutdownNow()"></a>shutdown() VS shutdownNow()</h4><ul><li>shutdown(): 关闭线程池，线程池的状态变为 SHUTDOWN。线程池不再接受新任务了，但是队列里的任务得执行完毕。</li><li>shutdownNow(): 关闭线程池，线程的状态变为 STOP。线程池会终止当前正在运行的任务，并停止处理排队的任务并返回正在等待执行的 List</li></ul><h4 id="isTerminated-VS-isShutdown"><a href="#isTerminated-VS-isShutdown" class="headerlink" title="isTerminated() VS isShutdown()"></a>isTerminated() VS isShutdown()</h4><ul><li>isShutDown(): 当调用 shutdown() 方法后返回为 true。</li><li>isTerminated(): 当调用 shutdown() 方法后，并且所有提交的任务完成后返回为 true</li></ul><h4 id="Callable-和-ThreadPoolExecutor-简单使用"><a href="#Callable-和-ThreadPoolExecutor-简单使用" class="headerlink" title="Callable 和 ThreadPoolExecutor 简单使用"></a>Callable 和 ThreadPoolExecutor 简单使用</h4><pre><code>public class CallableDemo {    private static final int CORE_POOL_SIZE = 5;    private static final int MAX_POOL_SIZE = 10;    private static final int QUEUE_CAPACITY = 100;    private static final Long KEEP_ALIVE_TIME = 1L;    public static final SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");    public static void main(String[] args) {        ThreadPoolExecutor executor = new ThreadPoolExecutor(                CORE_POOL_SIZE,                MAX_POOL_SIZE,                KEEP_ALIVE_TIME,                TimeUnit.SECONDS,                new ArrayBlockingQueue&lt;&gt;(QUEUE_CAPACITY),                new ThreadPoolExecutor.CallerRunsPolicy()        );        List&lt;Future&lt;String&gt;&gt; futures = new ArrayList&lt;&gt;();        Callable&lt;String&gt; callable = new MyCallable();        for (int i = 0; i &lt; 10; i++) {            Future&lt;String&gt; future = executor.submit(callable);            futures.add(future);        }        for (Future&lt;String&gt; fut : futures) {            try {                System.out.println(df.format(new Date()) + " : " + fut.get());            } catch (InterruptedException | ExecutionException e) {                e.printStackTrace();            }        }        //关闭线程池        executor.shutdown();    }}</code></pre><pre><code>public class MyCallable implements Callable&lt;String&gt; {    @Override    public String call() throws Exception {        Thread.sleep(1000);        return Thread.currentThread().getName();    }}</code></pre><pre><code>2020-03-01 12:59:03 : pool-1-thread-12020-03-01 12:59:04 : pool-1-thread-22020-03-01 12:59:04 : pool-1-thread-32020-03-01 12:59:04 : pool-1-thread-42020-03-01 12:59:04 : pool-1-thread-52020-03-01 12:59:04 : pool-1-thread-32020-03-01 12:59:05 : pool-1-thread-22020-03-01 12:59:05 : pool-1-thread-52020-03-01 12:59:05 : pool-1-thread-12020-03-01 12:59:05 : pool-1-thread-4</code></pre><h4 id="常见的几种线程池"><a href="#常见的几种线程池" class="headerlink" title="常见的几种线程池"></a>常见的几种线程池</h4><h5 id="FixedThreadPool-详解"><a href="#FixedThreadPool-详解" class="headerlink" title="FixedThreadPool 详解"></a>FixedThreadPool 详解</h5><pre><code>public static ExecutorService newFixedThreadPool(int nThreads) {    return new ThreadPoolExecutor(nThreads, nThreads,                                  0L, TimeUnit.MILLISECONDS,                                  new LinkedBlockingQueue&lt;Runnable&gt;());}</code></pre><blockquote><p>corePoolSize 和 maximumPoolSize 都设置为 nThreads</p></blockquote><ol><li>如果当前运行的线程数小于 corePoolSize， 如果再来新任务的话，就创建新的线程来执行任务</li><li>当前运行的线程数等于 corePoolSize 后， 如果再来新任务的话，会将任务加入 LinkedBlockingQueue</li><li>线程池中的线程执行完 手头的任务后，会在循环中反复从 LinkedBlockingQueue 中获取任务来执行</li></ol><ul><li>缺点：<br>使用的队列 LinkedBlockingQueue 是无限队列，因此不存在任务队列满的情况，运行中 FixedThreadPool 不会拒接任务，在任务比较多的时候会导致 OOM(内存溢出)</li></ul><h5 id="SingleThreadPool-详解"><a href="#SingleThreadPool-详解" class="headerlink" title="SingleThreadPool 详解"></a>SingleThreadPool 详解</h5><pre><code>public static ExecutorService newSingleThreadExecutor() {    return new FinalizableDelegatedExecutorService        (new ThreadPoolExecutor(1, 1,                                0L, TimeUnit.MILLISECONDS,                                new LinkedBlockingQueue&lt;Runnable&gt;()));}</code></pre><blockquote><p>只有一个线程的线程池 corePoolSize 和 maximumPoolSize 都设置为 1</p></blockquote><ul><li>缺点：<br>SingleThreadExecutor 使用无界队列 LinkedBlockingQueue 作为线程池的工作队列（队列的容量为 Intger.MAX_VALUE）。SingleThreadExecutor 使用无界队列作为线程池的工作队列会对线程池带来的影响与 FixedThreadPool 相同。说简单点就是可能会导致 OOM</li></ul><h5 id="CachedThreadPool-详解"><a href="#CachedThreadPool-详解" class="headerlink" title="CachedThreadPool 详解"></a>CachedThreadPool 详解</h5><pre><code>public static ExecutorService newCachedThreadPool() {    return new ThreadPoolExecutor(0, Integer.MAX_VALUE,                                  60L, TimeUnit.SECONDS,                                  new SynchronousQueue&lt;Runnable&gt;());}</code></pre><blockquote><p>CachedThreadPool 的 corePoolSize 被设置为空（0），maximumPoolSize 被设置为 Integer.MAX.VALUE，即它是无界的，这也就意味着如果主线程提交任务的速度高于 maximumPool 中线程处理任务的速度时，CachedThreadPool 会不断创建新的线程。极端情况下，这样会导致耗尽 cpu 和内存资源。</p></blockquote><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Json-Jackson的使用</title>
      <link href="/2020/02/04/json-jackson-de-shi-yong/"/>
      <url>/2020/02/04/json-jackson-de-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="Jackson-简介"><a href="#Jackson-简介" class="headerlink" title="Jackson 简介"></a>Jackson 简介</h4><p>Jackson 是一个简单基于 Java 应用库，Jackson 可以轻松的将 Java 对象转换成 json 对象和 xml 文档，同样也可以将 json、xml 转换成 Java 对象。Jackson 所依赖的 jar 包较少，简单易用并且性能也要相对高些，并且 Jackson 社区相对比较活跃，更新速度也比较快。<br><strong>性能比其他 Json 解析快</strong></p><h4 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h4><pre><code>&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;    &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;    &lt;version&gt;2.9.3&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;    &lt;artifactId&gt;jackson-core&lt;/artifactId&gt;    &lt;version&gt;2.9.3&lt;/version&gt;&lt;/dependency&gt;&lt;!-- https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations --&gt;&lt;dependency&gt;    &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;    &lt;artifactId&gt;jackson-annotations&lt;/artifactId&gt;    &lt;version&gt;2.9.3&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="对象和-JSON-转换"><a href="#对象和-JSON-转换" class="headerlink" title="对象和 JSON 转换"></a>对象和 JSON 转换</h4><pre><code>// 对象和json的转换public static void test() throws IOException {    // 创建ObjectMapper对象    ObjectMapper objectMapper = new ObjectMapper();    String jsonStudent = "{\"id\":10001, \"username\":\"tong\", \"password\":\"12345s\", \"nickname\":\"logic\"}";    // json 转换成 Java对象    User user = objectMapper.readValue(jsonStudent, User.class);    logger.debug("student: {}", user);    // Java对象转换成 json    final String jsonStr = objectMapper.writeValueAsString(user);    logger.debug("json : {} ", jsonStr);}</code></pre><h4 id="集合和-JSON-转换"><a href="#集合和-JSON-转换" class="headerlink" title="集合和 JSON 转换"></a>集合和 JSON 转换</h4><pre><code>    public static void test01() throws IOException {        ObjectMapper mapper = new ObjectMapper();        String jsonString = "{\"draw\":1,\"recordsTotal\":1,\"recordsFiltered\":1,\"data\":[{\"id\":33,\"title\":\"ad1\",\"subTitle\":\"ad1\",\"titleDesc\":\"ad1\",\"url\":\"https://sale.jd.com/act/XkCzhoisOMSW.html\",\"pic\":\"https://m.360buyimg.com/babel/jfs/t20164/187/1771326168/92964/b42fade7/5b359ab2N93be3a65.jpg\",\"pic2\":\"\",\"content\":\"&lt;p&gt;&lt;br&gt;&lt;/p&gt;\"}],\"error\":null}";        // 反序列化 JSON 到树        JsonNode jsonNode = mapper.readTree(jsonString);        // 从树中读取 data 节点        JsonNode jsonData = jsonNode.findPath("data");        System.out.println(jsonData);        // 反序列化 JSON 到集合        JavaType javaType = mapper.getTypeFactory().constructParametricType(ArrayList.class, TbContent.class);        List&lt;TbContent&gt; tbContents = mapper.readValue(jsonData.toString(), javaType);        for (TbContent tbContent : tbContents) {            System.out.println(tbContent);        }        // 序列化集合到 JSON        String json = mapper.writeValueAsString(tbContents);        System.out.println(json);    }</code></pre><h4 id="Json-注解"><a href="#Json-注解" class="headerlink" title="Json 注解"></a>Json 注解</h4><ul><li>@JsonProperty 指定一个属性用于 JSON 映射，可以使用 value 属性值修改 Json 属性名</li><li>@JsonIgnore 注解用于排除某个属性，该属性就不会被序列化和反序列化</li><li>@JsonIgnoreProperties 注解是类注解。在序列化为 Json 的时候，@JsonIgnoreProperties({“prop1”, “pro2”})会忽略 pro1 和 pro2 两个属性。在从 Json 反序列化 Java 类的时候，@JsonIgnoreProperties(ignoreUnknown=true)会忽略所有没有 setter 和 getter 的属性。</li><li>@JsonIgnoreType 类注解，会排除所有指定类型的属性</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Json </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Json </tag>
            
            <tag> Jackson </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日志-Log4j</title>
      <link href="/2020/02/04/ri-zhi-log4j/"/>
      <url>/2020/02/04/ri-zhi-log4j/</url>
      
        <content type="html"><![CDATA[<h4 id="Log4j"><a href="#Log4j" class="headerlink" title="Log4j"></a>Log4j</h4><ul><li>Log4j 全称 Log for java java 语言的日志工具</li></ul><h5 id="日志级别-由高到低"><a href="#日志级别-由高到低" class="headerlink" title="日志级别 (由高到低)"></a>日志级别 (由高到低)</h5><ul><li>fatal (致命)</li><li>error 系统上线后一般记录 error 日志</li><li>warn</li><li>info</li><li>debug</li><li>trace (堆栈) 调试多线程</li></ul><h4 id="Slf4j"><a href="#Slf4j" class="headerlink" title="Slf4j"></a>Slf4j</h4><p>Simple Loging Facade For Java, 只是接口没有实现，是一个规则，必须搭配其他日志实现方案</p><h4 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h4><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;    &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;    &lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="日志附加器"><a href="#日志附加器" class="headerlink" title="日志附加器"></a>日志附加器</h4><p>在 resource 目录下创建一个 log4j.properties 文件</p><pre><code>log4j.rootLogger=INFO, console, filelog4j.appender.console=org.apache.log4j.ConsoleAppenderlog4j.appender.console.layout=org.apache.log4j.PatternLayoutlog4j.appender.console.layout.ConversionPattern=%d %p [%c] - %m%nlog4j.appender.file=org.apache.log4j.DailyRollingFileAppenderlog4j.appender.file.File=logs/log.loglog4j.appender.file.layout=org.apache.log4j.PatternLayoutlog4j.appender.A3.MaxFileSize=1024KBlog4j.appender.A3.MaxBackupIndex=10log4j.appender.file.layout.ConversionPattern=%d %p [%c] - %m%n</code></pre><h4 id="日志的使用"><a href="#日志的使用" class="headerlink" title="日志的使用"></a>日志的使用</h4><pre><code>public static final Logger logger = LoggerFactory.getLogger(JacksonTest.class);logger.debug("json : {} ", jsonStr);</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 日志 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日志 </tag>
            
            <tag> Log4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试-JUnit</title>
      <link href="/2020/02/02/ce-shi-junit/"/>
      <url>/2020/02/02/ce-shi-junit/</url>
      
        <content type="html"><![CDATA[<h4 id="TDD"><a href="#TDD" class="headerlink" title="TDD"></a>TDD</h4><p>TDD 测试驱动编程，编程方法学<br>先写测试用例，再编码</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><ul><li><p>单元测试</p><ul><li>白盒测试 可以看到源码</li><li>黑盒测试 没有源码，功能测试</li><li>灰盒测试</li></ul></li><li><p>压力测试</p><ul><li>并发数的问题</li></ul></li><li><p>疲劳强度测试</p><ul><li>长期稳定运行 7 天一小周期</li></ul></li><li><p>冒烟测试</p><ul><li>对主要流程测试，支付环节，不断点击一个功能</li></ul></li><li><p>集成测试</p><ul><li>完整功能的测试，最重要的是测试，整体业务流程</li></ul></li><li><p>回归测试</p><ul><li>增加一个功能</li></ul></li><li><p>自动化测试</p><ul><li>编码、场景设计</li></ul></li></ul><h4 id="JUnit"><a href="#JUnit" class="headerlink" title="JUnit"></a>JUnit</h4><p>JUnit 是用于编写和运行可重复的自动化测试的开源测试框架，这样可以保证我们的代码按预期工作。JUnit 可广泛用于工业和作为支架(从命令行)或 IDE(如 IDEA)内单独的 Java 程序。</p><h4 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h4><pre><code>&lt;dependency&gt;    &lt;groupId&gt;junit&lt;/groupId&gt;    &lt;artifactId&gt;junit&lt;/artifactId&gt;    &lt;version&gt;4.12&lt;/version&gt;&lt;/dependency&gt;</code></pre><h4 id="JUnit-的使用"><a href="#JUnit-的使用" class="headerlink" title="JUnit 的使用"></a>JUnit 的使用</h4><pre><code>public class MyTest {    @Before    public void before(){        System.out.println("执行before()方法");    }    @After    public void after(){        System.out.println("执行after()方法");    }    @Test    public void testHi(){        System.out.println("hi junit");    }}</code></pre><h4 id="JUnit-断言"><a href="#JUnit-断言" class="headerlink" title="JUnit 断言"></a>JUnit 断言</h4><pre><code>@Testpublic void testAssert() {    String obj1 = "junit";    String obj2 = "junit";    String obj3 = "test";    String obj4 = "test";    String obj5 = null;    int var1 = 1;    int var2 = 2;    int[] arithmetic1 = {1, 2, 3};    int[] arithmetic2 = {1, 2, 3};    assertEquals(obj1, obj2); // 断言两个值相等    assertSame(obj3, obj4); // 断言两个对象引用相同的对象    assertNotSame(obj2, obj4);    assertNotNull(obj1);    assertNull(obj5);    assertTrue("为真", var1 == var2);    assertArrayEquals(arithmetic1, arithmetic2);}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> JUnit </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
            <tag> JUnit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot-服务端异常的统一处理</title>
      <link href="/2020/02/01/springboot-fu-wu-duan-yi-chang-de-tong-yi-chu-li/"/>
      <url>/2020/02/01/springboot-fu-wu-duan-yi-chang-de-tong-yi-chu-li/</url>
      
        <content type="html"><![CDATA[<h4 id="ControllerAdvice"><a href="#ControllerAdvice" class="headerlink" title="@ControllerAdvice"></a>@ControllerAdvice</h4><p>@ControllerAdvice，是Spring3.2提供的新注解,它是一个Controller增强器,可对Controller中被 @RequestMapping注解的方法加一些逻辑处理。最常用的就是异常处理</p><h4 id="统一的异常处理"><a href="#统一的异常处理" class="headerlink" title="统一的异常处理"></a>统一的异常处理</h4><ul><li><p>需要配合@ExceptionHandler使用</p></li><li><p><strong>当将异常抛到Controller时, 可以对异常进行统一处理</strong></p></li><li><p>规定返回的json格式或是跳转到一个错误页面</p></li><li><p>@RestControllerAdvice 包含了@ControllerAdvice和@ResponseBody</p><pre><code>@Datapublic class MyException extends RuntimeException {  private long code;  private String msg;  public  MyException(long code, String msg){      this.code = code;      this.msg = msg;  }}</code></pre><pre><code>@ControllerAdvice@ResponseBodypublic class GlobalExceptionInterceptor {  @ExceptionHandler(value = MyException.class)  public String exceptionHandler(HttpServletRequest request, Exception e) throws JsonProcessingException {      String failMsg = null;      // 判断异常类型，返回json数据或者是页面      if(e instanceof MyException){          failMsg = ((MyException) e).getMsg();      }      return failMsg;  }}</code></pre></li></ul><pre><code></code></pre><p>@RestController<br>@RequestMapping(“student”)<br>public class HelloController {</p><pre><code>@PostMapping("addStudent")public String addStudent(@RequestBody @Valid Student student){    return null;}@GetMapping("hello")public String hello() throws MyException {    throw new MyException(101L, "自定义异常");}</code></pre><p>}<br>```</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> springboot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> springboot </tag>
            
            <tag> 异常处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker安装MySQL Redis和RabbitMQ</title>
      <link href="/2020/02/01/docker-an-zhuang-mysql-redis-he-rabbitmq/"/>
      <url>/2020/02/01/docker-an-zhuang-mysql-redis-he-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h4 id="docker-compose-yml-文件"><a href="#docker-compose-yml-文件" class="headerlink" title="docker-compose.yml 文件"></a>docker-compose.yml 文件</h4><pre class=" language-yml"><code class="language-yml">version: '3'services:  mysql-server:    image: mysql:5.7    container_name: mysql-server    restart: always    ports:      - 3306:3306    environment:      MYSQL_ROOT_PASSWORD: 123456  redis-server:    image: redis:latest    container_name: redis-server    restart: always    ports:      - 6379:6379  rabbitmq-server:    image: rabbitmq:management    container_name: rabbitmq-server    restart: always    ports:      - 5672:5672      - 15672:15672</code></pre><p>启动容器：docker-compose up -d</p><table><thead><tr><th>数据层</th><th>ip端口</th></tr></thead><tbody><tr><td>MySQL</td><td><a href="http://localhost:3306" target="_blank" rel="noopener">http://localhost:3306</a> root/123456</td></tr><tr><td>Redis</td><td><a href="http://localhost:6379" target="_blank" rel="noopener">http://localhost:6379</a></td></tr><tr><td>RabbitMQ</td><td><a href="http://localhost:15672" target="_blank" rel="noopener">http://localhost:15672</a> guest/guest</td></tr></tbody></table><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger2-接口文档引擎</title>
      <link href="/2020/02/01/swagger2-jie-kou-wen-dang-yin-qing/"/>
      <url>/2020/02/01/swagger2-jie-kou-wen-dang-yin-qing/</url>
      
        <content type="html"><![CDATA[<h4 id="swagger2-简介"><a href="#swagger2-简介" class="headerlink" title="swagger2 简介"></a>swagger2 简介</h4><p>swagger2是接口文档引擎，虽然帮助我们解决了接口文档的 编写，但是swagger2是==侵入式==的，最明显的就是代码植入性比较强。</p><h4 id="maven-依赖"><a href="#maven-依赖" class="headerlink" title="maven 依赖"></a>maven 依赖</h4><pre><code>&lt;!-- Swagger2 Begin --&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-swagger2&lt;/artifactId&gt;    &lt;version&gt;2.8.0&lt;/version&gt;&lt;/dependency&gt;&lt;dependency&gt;    &lt;groupId&gt;io.springfox&lt;/groupId&gt;    &lt;artifactId&gt;springfox-swagger-ui&lt;/artifactId&gt;    &lt;version&gt;2.8.0&lt;/version&gt;&lt;/dependency&gt;&lt;!-- Swagger2 End --&gt;</code></pre><h4 id="Swagger2配置"><a href="#Swagger2配置" class="headerlink" title="Swagger2配置"></a>Swagger2配置</h4><pre><code>@Configurationpublic class Swagger2Config {    /**     * RequestHandlerSelectors.basePackage("com.aloneness.controller") 为controller包路径     *      * @return     */    @Bean    public Docket createRestApi(){        return new Docket(DocumentationType.SWAGGER_2)                .apiInfo(apiInfo())                .select()                .apis(RequestHandlerSelectors.basePackage("com.aloneness.controller"))                .paths(PathSelectors.any())                .build();    }    private ApiInfo apiInfo(){        return new ApiInfoBuilder()                .title("MySwagger2 API 文档")                .description("MySwagger2 API 网关接口，www.aloneness.cn")                .termsOfServiceUrl("http://www.aloneness.cn")                .version("1.0.0")                .build();    }}</code></pre><h4 id="启动swagger2"><a href="#启动swagger2" class="headerlink" title="启动swagger2"></a>启动swagger2</h4><p>加上注解<code>@EnableSwagger2</code></p><h4 id="使用swagger2"><a href="#使用swagger2" class="headerlink" title="使用swagger2"></a>使用swagger2</h4><pre><code>@ApiOperation(value = "用户注册", notes = "用户注册，注意用户名和邮箱不要重复")@PostMapping("reg")public void reg(@ApiParam(name = "user", value = "用户模型")User user){}</code></pre><h4 id="swagger2-常用注解"><a href="#swagger2-常用注解" class="headerlink" title="swagger2 常用注解"></a>swagger2 常用注解</h4><ul><li>@Api: 修饰整个类，描述整个Controller的作用</li><li>@ApiOperation: 描述一个类的一个方法，或者说一个接口</li><li>@ApiParam: 用在请求方法中，描述参数信息</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> swagger2 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java线程-线程基础</title>
      <link href="/2020/01/04/java-xian-cheng-xian-cheng-ji-chu/"/>
      <url>/2020/01/04/java-xian-cheng-xian-cheng-ji-chu/</url>
      
        <content type="html"><![CDATA[<h4 id="1-线程状态-State"><a href="#1-线程状态-State" class="headerlink" title="1. 线程状态(State)"></a>1. 线程状态(State)</h4><p>线程状态有六种，在 java.lang.Thread 源码中</p><pre><code>public enum State {    NEW,    RUNNABLE,    BLOCKED,    WAITING,    TIMED_WAITING,    TERMINATED;}</code></pre><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/%E7%BA%BF%E7%A8%8B%E7%8A%B6%E6%80%81.jpg" alt=""></p><h5 id="新建-New"><a href="#新建-New" class="headerlink" title="新建(New)"></a>新建(New)</h5><p>线程刚创建，还未启动</p><pre><code>Thread thread = new Thread();System.out.println(thread.getState()); // NEW</code></pre><h5 id="可运行-Runnable"><a href="#可运行-Runnable" class="headerlink" title="可运行(Runnable)"></a>可运行(Runnable)</h5><ul><li>这个状态的线程，其正在 JVM 中执行，但是这个”执行”，不一定是真的在运行，也有可能是在等待 CPU 资源</li><li>包含了操作系统线程状态中的 Running 和 Ready, Ready 表示资源一到可以随时执行，Running 表示真正的执行中</li></ul><pre><code>Thread thread = new Thread();thread.start();System.out.println(thread.getState()); // RUNNABLE</code></pre><h5 id="阻塞-Blocked"><a href="#阻塞-Blocked" class="headerlink" title="阻塞(Blocked)"></a>阻塞(Blocked)</h5><p>等待获取一个排它锁，如果其他线程释放了锁就会结束此状态</p><pre><code>public class MyThread extends Thread {    private byte[] lock = new byte[0];    public MyThread(byte[] lock) {        this.lock = lock;    }    @Override    public void run() {        synchronized (lock){            try {                Thread.sleep(10000);            } catch (InterruptedException e) {                e.printStackTrace();            }            System.out.println("done");        }    }}</code></pre><pre><code>public class Test {    public static void main(String[] args) throws InterruptedException {        byte[] lock = new byte[0];  // 节约资源，只能成三条操作码，Object object = new Object()生成7条操作码        MyThread thread1 = new MyThread(lock);        thread1.start();        MyThread thread2 = new MyThread(lock);        thread2.start();        Thread.sleep(1000);//等一会再检查状态        System.out.println(thread2.getState()); // BLOCKED    }}</code></pre><p>线程 1 先执行，执行到 synchronized 获取了 Lock 锁，线程 2 后执行，想要获取 Lock 锁，获取失败，进入阻塞状态</p><h5 id="无限期等待-Waiting"><a href="#无限期等待-Waiting" class="headerlink" title="无限期等待(Waiting)"></a>无限期等待(Waiting)</h5><p>进入到此状态，一定执行了一些代码：</p><ul><li>Object.wait(): 当一个线程执行了 Object.wait(), 它一定等待另一个线程执行 Object.notify()或 Object.notifyAll()进行唤醒，否则一直等待</li></ul><pre><code>public class MyThread extends Thread {    private byte[] lock = new byte[0];    public MyThread(byte[] lock) {        this.lock = lock;    }    @Override    public void run() {        synchronized (lock){            try {                lock.wait();            } catch (InterruptedException e) {                e.printStackTrace();            }        }    }}</code></pre><pre><code>public class Test {    public static void main(String[] args) throws InterruptedException {        byte[] lock = new byte[0];        MyThread thread1 = new MyThread(lock);        thread1.start();        Thread.sleep(100);        System.out.println(thread1.getState()); // WAITING        synchronized (lock){            lock.notify();        }        Thread.sleep(100);        System.out.println(thread1.getState()); // TERMINATED    }}</code></pre><ul><li>Thread.join(): 一个线程 thread，其在主线程中被执行了 thread.join()的时候，主线程即会等待该线程执行完成</li></ul><pre><code>public class MyThread extends Thread {    private byte[] lock = new byte[0];    public MyThread(byte[] lock) {        this.lock = lock;    }    @Override    public void run() {        try {            System.out.println("thread1 run");            Thread.sleep(10000);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><pre><code>public class MyThread1 extends Thread {    private Thread thread;    public MyThread1(Thread thread){        this.thread = thread;    }    @Override    public void run() {        try {            thread.join();            System.out.println("thread2 run");        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><pre><code>public class Test {    public static void main(String[] args) throws InterruptedException {        byte[] lock = new byte[0];        MyThread thread = new MyThread(lock);        thread.start();        MyThread1 thread1 = new MyThread1(thread);        thread1.start();        Thread.sleep(100);        System.out.println(thread1.getState()); // WAITING    }}</code></pre><ul><li>LockSupport.park(): 当一个线程执行了 LockSupport.park()的时候，其在等待执行 LockSupport.unpark(thread)</li></ul><pre><code>public class MyThread extends Thread {    private byte[] lock = new byte[0];    public MyThread(byte[] lock) {        this.lock = lock;    }    @Override    public void run() {        LockSupport.park();    }}</code></pre><pre><code>public class Test {    public static void main(String[] args) throws InterruptedException {        byte[] lock = new byte[0];        MyThread thread = new MyThread(lock);        thread.start();        Thread.sleep(100);        System.out.println(thread.getState()); // WAITING        LockSupport.unpark(thread);        Thread.sleep(100);        System.out.println(thread.getState()); // TERMINATED    }}</code></pre><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>没有设置 Timeout 参数的 Object.wait()方法</td><td>Object.notify()/Object.notifyAll()</td></tr><tr><td>没有设置 Timeout 参数的 Thread.join()方法</td><td>被调用的线程执行完毕</td></tr><tr><td>LockSupport.park()方法</td><td>LockSupport.unpark(Thread)</td></tr></tbody></table><h5 id="限期等待-Timed-Waiting"><a href="#限期等待-Timed-Waiting" class="headerlink" title="限期等待(Timed Waiting)"></a>限期等待(Timed Waiting)</h5><p>无需等待其他线程显示地唤醒，在一定时间之后会被系统自动唤醒。调用 Thread.sleep()方法使线程进入限期等待状态时，常常用“使一个线程睡眠”进行描述。调用 Object.wait()方法使线程进入限期等待或者无限期等待是，常常用“挂起一个线程”进行描述</p><ul><li>Thread.sleep(long)</li></ul><pre><code>public class MyThread3 extends Thread{    @Override    public void run() {        try {            Thread.sleep(10000);        } catch (InterruptedException e) {            e.printStackTrace();        }    }}</code></pre><pre><code>public class Test {    public static void main(String[] args) throws InterruptedException {        Thread thread = new MyThread3();        thread.start();        Thread.sleep(100);        System.out.println(thread.getState()); // TIMED_WAITING    }}</code></pre><ul><li>Object.wait(long)</li></ul><pre><code>public class MyThread extends Thread {    private byte[] lock = new byte[0];    public MyThread(byte[] lock) {        this.lock = lock;    }    @Override    public void run() {        synchronized (lock){            try {                // 注意，此处1s之后线程醒来，会重新尝试去获取锁，如果拿不到，后面的代码也不执行                lock.wait(1000);            } catch (InterruptedException e) {                e.printStackTrace();            }            System.out.println("lock end");        }    }}</code></pre><pre><code>public class Test {    public static void main(String[] args) throws InterruptedException {        byte[] lock = new byte[0];        Thread thread = new MyThread(lock);        thread.start();        Thread.sleep(100);        System.out.println(thread.getState()); // TIMED_WAITING        Thread.sleep(2000);        System.out.println(thread.getState()); // TERMINATED    }}</code></pre><ul><li>Thread.join(long)</li><li>LockSupport.parkNanos()</li><li>LockSupport.parkUntil()</li></ul><table><thead><tr><th>进入方法</th><th>退出方法</th></tr></thead><tbody><tr><td>Thread.sleep()方法</td><td>时间结束</td></tr><tr><td>设置 Timeout 参数的 Object.wait()方法</td><td>时间结束/Object.notify()/Object.notifyAll()</td></tr><tr><td>设置 Timeout 参数的 Thread.join()方法</td><td>时间结束被调用的线程执行完毕</td></tr><tr><td>LockSupport.parkNanos()方法</td><td>LockSupport.unpark(Thread)</td></tr><tr><td>LockSupport.parkUntil()方法</td><td>LockSupport.unpark(Thread)</td></tr></tbody></table><h5 id="死亡-Terminated"><a href="#死亡-Terminated" class="headerlink" title="死亡(Terminated)"></a>死亡(Terminated)</h5><p>可以是线程结束任务之后自己结束，或者产生了异常而结束</p><h4 id="2-使用线程"><a href="#2-使用线程" class="headerlink" title="2. 使用线程"></a>2. 使用线程</h4><h5 id="1-实现-Runnable-接口"><a href="#1-实现-Runnable-接口" class="headerlink" title="1. 实现 Runnable 接口"></a>1. 实现 Runnable 接口</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>MyRunnable myRunnable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>myRunnable<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="2-实现-Callable-接口，与-Runnable-相比，Callable-可以有返回值，返回值通过-FutureTask-进行封装"><a href="#2-实现-Callable-接口，与-Runnable-相比，Callable-可以有返回值，返回值通过-FutureTask-进行封装" class="headerlink" title="2. 实现 Callable 接口，与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装"></a>2. 实现 Callable 接口，与 Runnable 相比，Callable 可以有返回值，返回值通过 FutureTask 进行封装</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCallable</span> <span class="token keyword">implements</span> <span class="token class-name">Callable</span><span class="token operator">&lt;</span>String<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>public class CallableTest {    public static void main(String[] args) throws ExecutionException, InterruptedException {        Callable&lt;String&gt; callable = new MyCallable();        FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(callable);        Thread thread = new Thread(futureTask);        thread.setName("CallableTest");        thread.start();        System.out.println(futureTask.get()); // CallableTest    }}</code></pre><h5 id="3-继承-Thread-类"><a href="#3-继承-Thread-类" class="headerlink" title="3. 继承 Thread 类"></a>3. 继承 Thread 类</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h4 id="Daemon"><a href="#Daemon" class="headerlink" title="Daemon"></a>Daemon</h4><ul><li>守护线程是程序运行时在后台提供服务的线程，不属于程序中不可或缺的部分。</li><li>当所有非守护线程结束时，线程也就终止，同时会杀死所有守护线程</li><li>使用 setDaemon()方法将一个线程设置为守护线程</li></ul><h4 id="sleep"><a href="#sleep" class="headerlink" title="sleep()"></a>sleep()</h4><ul><li>让当前正在执行的线程在指定的时间内暂停执行，进入阻塞状态</li><li><code>sleep()</code>方法不会释放“锁标志”, 如果有<code>synchronized</code>同步块，其他线程仍然不能访问共享数据</li></ul><h4 id="wait"><a href="#wait" class="headerlink" title="wait()"></a>wait()</h4><ul><li>wait() 方法需要和 notify() 及 notifyAll() 两个方法一起介绍，这三个方法用于协调多个线程对共享数据的存取，所以必须在 synchronized 语句块内使用。也就是说，调用 wait()，notify() 和 notifyAll() 的任务在调用这些方法前必须拥有对象的锁。注意，它们都是 Object 类的方法，而不是 Thread 类的方法。</li><li>wait() 方法与 sleep() 方法的不同之处在于，wait()方法会释放对象的“锁标志”。当调用某一对象的 wait() 方法后，会使当前线程暂停执行，并将当前线程放入对象等待池中，直到调用了 notify() 方法后，将从对象等待池中移出任意一个线程并放入锁标志等待池中，只有锁标志等待池中的线程可以获取锁标志，它们随时准备争夺锁的拥有权。当调用了某个对象的 notifyAll() 方法，会将对象等待池中的所有线程都移动到该对象的锁标志等待池。</li><li>除了使用 notify() 和 notifyAll() 方法，还可以使用带毫秒参数的 wait(long timeout) 方法，效果是在延迟 timeout 毫秒后，被暂停的线程将被恢复到锁标志等待池。</li><li>此外，wait()，notify() 及 notifyAll() 只能在 synchronized 语句中使用，但是如果使用的是 ReenTrantLock 实现同步，该如何达到这三个方法的效果呢？解决方法是使用 ReenTrantLock.newCondition() 获取一个 Condition 类对象，然后 Condition 的 await()，signal() 以及 signalAll() 分别对应上面的三个方法</li></ul><h4 id="yield"><a href="#yield" class="headerlink" title="yield()"></a>yield()</h4><p>yield() 方法和 sleep() 方法类似，也不会释放“锁标志”，区别在于，它没有参数，即 yield() 方法只是使当前线程重新回到可执行状态，所以执行 yield() 的线程有可能在进入到可执行状态后马上又被执行，另外 yield() 方法只能使同优先级或者高优先级的线程得到执行机会，这也和 sleep() 方法不同。</p><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>join() 方法会使当前线程等待调用 join() 方法的线程结束后才能继续执行</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发-synchronized关键字</title>
      <link href="/2020/01/04/java-bing-fa-synchronized-guan-jian-zi/"/>
      <url>/2020/01/04/java-bing-fa-synchronized-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>synchronized 是一个同步、重量级锁。synchronized 关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行</p><h4 id="synchronized-关键字的使用"><a href="#synchronized-关键字的使用" class="headerlink" title="synchronized 关键字的使用"></a>synchronized 关键字的使用</h4><h5 id="修饰实例方法"><a href="#修饰实例方法" class="headerlink" title="修饰实例方法"></a>修饰实例方法</h5><p>给当前对象实例加锁，进入同步代码需要获取当前对象实例的锁</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" count="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h5 id="修饰静态方法"><a href="#修饰静态方法" class="headerlink" title="修饰静态方法"></a>修饰静态方法</h5><p>给当前类加锁，会作用于类的所有对象实例</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">test01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    count<span class="token operator">--</span><span class="token punctuation">;</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" count="</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="修饰代码块"><a href="#修饰代码块" class="headerlink" title="修饰代码块"></a>修饰代码块</h5><p>指定加锁对象，进入同步代码块前要获得给定对象的锁</p><pre><code>synchronized (Test01.class){    count++;}</code></pre><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>双重校验锁实现单例模式</p><pre><code>public class Singleton {    private volatile static Singleton instance;    private Singleton(){    }    public static Singleton getInstance(){        if (instance == null){            synchronized (Singleton.class){                if(instance == null){                    instance = new Singleton();                }            }        }        return instance;    }}</code></pre><p>instance 使用 volatile 修饰防止指令重排序，new Singleton()分三步</p><ul><li>为 uniqueInstance 分配内存空间</li><li>初始化 uniqueInstance</li><li>将 uniqueInstance 指向分配的内存地址</li></ul><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">{</span>    String name<span class="token punctuation">;</span>    <span class="token keyword">double</span> balance<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Thread<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>balance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Account account <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span>account<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="锁是可重入的"><a href="#锁是可重入的" class="headerlink" title="锁是可重入的"></a>锁是可重入的</h4><p>一个同步方法可以调用另外一个同步方法，一个线程已经拥有某个对象的锁，再次申请的时候仍然会得到该对象的锁，也就是说 synchronized 获得的锁是可重入的</p><pre><code>public class T {    public synchronized void m1(){        System.out.println("m1 start");        try {            TimeUnit.SECONDS.sleep(1);        } catch (InterruptedException e) {            e.printStackTrace();        }        m2();    }    public synchronized void m2(){        try {            TimeUnit.SECONDS.sleep(2);        } catch (InterruptedException e) {            e.printStackTrace();        }        System.out.println("m2");    }    public static void main(String[] args) {        T t = new T();        new Thread(()-&gt;t.m1()).start();        new Thread(()-&gt;t.m1()).start();    }}</code></pre><h4 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h4><p>synchronized 的实现属于 JVM 层面</p><h5 id="同步代码块的情况"><a href="#同步代码块的情况" class="headerlink" title="同步代码块的情况"></a>同步代码块的情况</h5><pre><code>public class SynchronizedDemo {    public void method() {        synchronized (this) {            System.out.println("synchronized code block");        }    }}</code></pre><p>使用 javap -c -s -v -l SynchronizedDemo.class 命令查看字节码<br><img src="http://q6hvsvrsg.bkt.clouddn.com/img/synchronized.jpg" alt=""><br>synchronized 同步语句块的实现使用的是 monitorenter 和 monitorexit 指令，其中 monitorenter 指令指向同步代码块的开始位置，monitorexit 指令则指明同步代码块的结束位置。 当执行 monitorenter 指令时，线程试图获取锁也就是获取 monitor(monitor 对象存在于每个 Java 对象的对象头中，synchronized 锁便是通过这种方式获取锁的，也是为什么 Java 中任意对象可以作为锁的原因) 的持有权。当计数器为 0 则可以成功获取，获取后将锁计数器设为 1 也就是加 1。相应的在执行 monitorexit 指令后，将锁计数器设为 0，表明锁被释放。如果获取对象锁失败，那当前线程就要阻塞等待，直到锁被另外一个线程释放为止。</p><h5 id="修饰方法的情况"><a href="#修饰方法的情况" class="headerlink" title="修饰方法的情况"></a>修饰方法的情况</h5><pre><code>public class SynchronizedDemo01 {    public synchronized void method() {        System.out.println("synchronized code block");    }}</code></pre><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/Java%E5%B9%B6%E5%8F%91-synchronized-01.jpg" alt=""></p><p>synchronized 修饰的方法并没有 monitorenter 指令和 monitorexit 指令，取得代之的确实是 <code>ACC_SYNCHRONIZED</code> 标识，该标识指明了该方法是一个同步方法，JVM 通过该 ACC_SYNCHRONIZED 访问标志来辨别一个方法是否声明为同步方法，从而执行相应的同步调用。</p><h4 id="synchronized-和-ReentrantLock-的区别"><a href="#synchronized-和-ReentrantLock-的区别" class="headerlink" title="synchronized 和 ReentrantLock 的区别"></a>synchronized 和 ReentrantLock 的区别</h4><ol><li>两者都是可重入锁</li></ol><p>可重入锁是指自己可以再次获取自己的内部锁。比如一个线程获得了某个对象的锁，此时这个对象锁还没有释放，当其再次想获取这个对象的锁的时候还是可以获取的，如果锁不可以重入的话，就会造成死锁。同一个线程每次获取锁，锁的计数器都自增 1，所以要等到锁的计数器下降为 0 时才能释放锁。</p><ol start="2"><li>synchronized 依赖于 JVM 而 ReentrantLock 依赖于 API</li></ol><p>synchronized 是依赖于 JVM 实现的，前面我们也讲到了 虚拟机团队在 JDK1.6 为 synchronized 关键字进行了很多优化，但是这些优化都是在虚拟机层面实现的，并没有直接暴露给我们。ReentrantLock 是 JDK 层面实现的（也就是 API 层面，需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成），所以我们可以通过查看它的源代码，来看它是如何实现的。</p><ol start="3"><li>ReentrantLock 比 synchronized 增加了一些高级功能</li></ol><ul><li>等待可中断</li></ul><p>通过 lock.lockInterruptibly()，正在等待的线程可以选择放弃等待，改为处理其他事情</p><ul><li>可实现公平锁</li></ul><p>ReentrantLock 可以指定是公平锁还是非公平锁。而 synchronized 只能是非公平锁。公平锁就是先等待的线程先获得锁。ReentrantLock 默认情况是非公平的，可以通过 ReentrantLock 类的 ReentrantLock(boolean fair)构造方法来指定是否是公平的。</p><ul><li>可实现选择性通知</li></ul><p>synchronized 关键字与 wait()和 notify()/notifyAll()方法相结合可以实现等待/通知机制，ReentrantLock 类当然也可以实现，但是需要借助于 Condition 接口与 newCondition() 方法。Condition 是 JDK1.5 之后才有的，它具有很好的灵活性，比如可以实现多路通知功能也就是在一个 Lock 对象中可以创建多个 Condition 实例（即对象监视器），线程对象可以注册在指定的 Condition 中，从而可以有选择性的进行线程通知，在调度线程上更加灵活。 在使用 notify()/notifyAll()方法进行通知时，被通知的线程是由 JVM 选择的，用 ReentrantLock 类结合 Condition 实例可以实现“选择性通知” ，这个功能非常重要，而且是 Condition 接口默认提供的。而 synchronized 关键字就相当于整个 Lock 对象中只有一个 Condition 实例，所有的线程都注册在它一个身上。如果执行 notifyAll()方法的话就会通知所有处于等待状态的线程这样会造成很大的效率问题，而 Condition 实例的 signalAll()方法 只会唤醒注册在该 Condition 实例中的所有等待线程。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java并发-volatile关键字</title>
      <link href="/2020/01/04/java-bing-fa-volatile-guan-jian-zi/"/>
      <url>/2020/01/04/java-bing-fa-volatile-guan-jian-zi/</url>
      
        <content type="html"><![CDATA[<h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>被 volatile 修饰的共享变量，具有以下两大特性：</p><ul><li>保证了不同线程对该变量操作的内存可见性</li><li>禁止指令重排序</li></ul><h4 id="Java-内存模型"><a href="#Java-内存模型" class="headerlink" title="Java 内存模型"></a>Java 内存模型</h4><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/Java-voliate-01.jpg" alt=""></p><p>JMM(Java 内存模型)规定所有的变量都是存在主存中的，每个线程又包含自己的工作内存，所有的线程的操作都是以工作内存为主的，他们只能访问自己的工作内存，且工作前后都要把值同步到主存中。</p><p>在线程执行的时候，首先会从主存中 read 变量值，再 load 到工作内存中的副本中，然后再传给处理器执行，执行完毕后再给工作内存的副本赋值，随后工作内存再把值传回给主存，主存中的值才更新。</p><h5 id="Java-内存模型虽然加快了速度，但是带来了一些问题"><a href="#Java-内存模型虽然加快了速度，但是带来了一些问题" class="headerlink" title="Java 内存模型虽然加快了速度，但是带来了一些问题"></a>Java 内存模型虽然加快了速度，但是带来了一些问题</h5><pre class=" language-java"><code class="language-java">i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre><p>假设 i 初始值为 0，当两个线程执行的时候会出现以下情况:</p><pre><code>线程1：load i from 主存  // i = 0        i + 1 // i = 1线程2：laod i from 主存 // i = 0        i + 1 // i = 1线程1：save i to 主存线程2：save i to 主存</code></pre><p>以上的情况会造成缓存不一致问题</p><h5 id="volatile-解决，保证变量的可见性"><a href="#volatile-解决，保证变量的可见性" class="headerlink" title="volatile 解决，保证变量的可见性"></a>volatile 解决，保证变量的可见性</h5><p><img src="http://q6hvsvrsg.bkt.clouddn.com/img/Java-voliate-02.jpg" alt=""></p><p>解决这个问题，就需要把变量声明为 volatile，这就指示 JVM，这个变量是不稳定的，每次使用它都到主存中进行读取。</p><h4 id="Java-内存模型的三大特性"><a href="#Java-内存模型的三大特性" class="headerlink" title="Java 内存模型的三大特性"></a>Java 内存模型的三大特性</h4><h5 id="原子性-Atomicity"><a href="#原子性-Atomicity" class="headerlink" title="原子性(Atomicity)"></a>原子性(Atomicity)</h5><p>java 中，对于读取和赋值操作都是原子性操作，要做一定做完，要么就没有执行。比如 i = 2;就是简单的读取操作，必定是原子操作， j = i 不是原子操作，分两步，先读取 i 的值，然后再将值赋给 j，JMM 只是实现了基本的原子性，如果是 i++这样的操作，需要借助 synchronized 和 Lock 保证整块代码的原子性。线程在释放锁之前，必定会把 i 的值刷回到主存的。</p><h5 id="可见性-Visibility"><a href="#可见性-Visibility" class="headerlink" title="可见性(Visibility)"></a>可见性(Visibility)</h5><p>Java 就是利用 volatile 来提供可见性的。当一个变量被 volatile 修饰时，那么对它的修改会立刻刷新到主存，当其他线程需要读取该变量时，会去内存中读取新值。而普通变量则不能保证这一点。其实通过 synchronized 和 Lock 也能保证可见性，线程释放锁之前，会报共享变量值都刷回到主存，但是 synchronized 和 Lock 的开销都更大。</p><h5 id="有序性-Ordering"><a href="#有序性-Ordering" class="headerlink" title="有序性(Ordering)"></a>有序性(Ordering)</h5><p>JMM 是允许编译器和处理器对指令重排序的，但是规定了 as-if-serial 含义，即不管怎么重排序，程序的执行结果不能改变。JMM 保证了重排序不会影响单线程的执行，但是在多线程中却容易出现问题。</p><h4 id="synchronized-关键字和-volatile-关键字的区别"><a href="#synchronized-关键字和-volatile-关键字的区别" class="headerlink" title="synchronized 关键字和 volatile 关键字的区别"></a>synchronized 关键字和 volatile 关键字的区别</h4><ol><li>volatile 关键字是线程同步的轻量级实现，所以 volatile 性能肯定比 synchronized 关键字要好。但是 volatile 关键字只能用于变量而 synchronized 关键字可以修饰方法以及代码块。synchronized 关键字在 JavaSE1.6 之后进行了主要包括为了减少获得锁和释放锁带来的性能消耗而引入的偏向锁和轻量级锁以及其它各种优化之后执行效率有了显著提升，实际开发中使用 synchronized 关键字的场景还是更多一些。</li><li>多线程访问 volatile 关键字不会发生阻塞，而 synchronized 关键字可能会发生阻塞。</li><li>volatile 关键字能保证数据的可见性，但不能保证数据的原子性。synchronized 关键字两者都能保证。</li><li>volatile 关键字主要用于解决变量在多个线程之间的可见性，而 synchronized 关键字解决的是多个线程之间访问资源的同步性。</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8-函数式编程接口</title>
      <link href="/2020/01/03/java8-han-shu-shi-bian-cheng-jie-kou/"/>
      <url>/2020/01/03/java8-han-shu-shi-bian-cheng-jie-kou/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Customer-接口"><a href="#1-Customer-接口" class="headerlink" title="1. Customer 接口"></a>1. Customer 接口</h4><ul><li>消费者的含义，接受参数而不返回</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Consumer</span><span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">accept</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> Consumer<span class="token operator">&lt;</span>T<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Consumer<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> T<span class="token operator">></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> after<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>简化</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Consumer c <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>可以多重处理</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Consumer c <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>结果为hello worldhello worldhello world</code></pre><h4 id="2-Function-接口"><a href="#2-Function-接口" class="headerlink" title="2. Function 接口"></a>2. Function 接口</h4><ul><li>代表函数的含义，即有输入，也有输出，使用更加灵活</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@FunctionalInterface</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Function</span><span class="token operator">&lt;</span>T<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token punctuation">{</span>    R <span class="token function">apply</span><span class="token punctuation">(</span>T t<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> Function<span class="token operator">&lt;</span>V<span class="token punctuation">,</span> R<span class="token operator">></span> <span class="token function">compose</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> V<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">T</span><span class="token operator">></span> before<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>before<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>V v<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token function">apply</span><span class="token punctuation">(</span>before<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">default</span> <span class="token operator">&lt;</span>V<span class="token operator">></span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> V<span class="token operator">></span> <span class="token function">andThen</span><span class="token punctuation">(</span>Function<span class="token operator">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> R<span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">V</span><span class="token operator">></span> after<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Objects<span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>after<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>T t<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> after<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token function">apply</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">static</span> <span class="token operator">&lt;</span>T<span class="token operator">></span> Function<span class="token operator">&lt;</span>T<span class="token punctuation">,</span> T<span class="token operator">></span> <span class="token function">identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> t <span class="token operator">-</span><span class="token operator">></span> t<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>简化</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> f1 <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">+</span> i<span class="token punctuation">;</span>        Function<span class="token operator">&lt;</span>Integer<span class="token punctuation">,</span> Integer<span class="token operator">></span> f2 <span class="token operator">=</span> i <span class="token operator">-</span><span class="token operator">></span> i <span class="token operator">*</span> i<span class="token punctuation">;</span>        Consumer c <span class="token operator">=</span> System<span class="token punctuation">.</span>out<span class="token operator">:</span><span class="token operator">:</span>println<span class="token punctuation">;</span>        c<span class="token punctuation">.</span><span class="token function">accept</span><span class="token punctuation">(</span>f1<span class="token punctuation">.</span><span class="token function">andThen</span><span class="token punctuation">(</span>f2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 16</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-Optional-接口"><a href="#3-Optional-接口" class="headerlink" title="3. Optional 接口"></a>3. Optional 接口</h4><ul><li>Optional 本质是一个容器，你可以将你的变量交由它进行封装，这样我们就不用显式对原变量进行 null 检测，防止出现各种空指针异常。</li><li>获取一个学生的考试分数</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> Integer <span class="token function">getScore</span><span class="token punctuation">(</span>Student student<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> Optional<span class="token punctuation">.</span><span class="token function">ofNullable</span><span class="token punctuation">(</span>student<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>Student<span class="token operator">:</span><span class="token operator">:</span>getScore<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">orElse</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>orElse 如果为 null 就返回默认值</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-标签使用</title>
      <link href="/2020/01/01/mybatis-biao-qian-shi-yong/"/>
      <url>/2020/01/01/mybatis-biao-qian-shi-yong/</url>
      
        <content type="html"><![CDATA[<h4 id="对象中包含对象和集合的映射"><a href="#对象中包含对象和集合的映射" class="headerlink" title="对象中包含对象和集合的映射"></a>对象中包含对象和集合的映射</h4><p>对象使用association标签关联</p><pre><code>  &lt;resultMap id="baseResultMap" type="com.aloneness.vhr.model.Menu" &gt;    &lt;id column="id" property="id" jdbcType="INTEGER" /&gt;    &lt;result column="url" property="url" jdbcType="VARCHAR" /&gt;    &lt;result column="path" property="path" jdbcType="VARCHAR" /&gt;    &lt;result column="component" property="component" jdbcType="VARCHAR" /&gt;    &lt;result column="name" property="name" jdbcType="VARCHAR" /&gt;    &lt;result column="iconCls" property="iconCls" jdbcType="VARCHAR" /&gt;    &lt;result column="parentId" property="parentId" jdbcType="INTEGER" /&gt;    &lt;result column="enabled" property="enabled" jdbcType="BIT" /&gt;    &lt;association property="meta" javaType="org.javaboy.vhr.model.Meta"&gt;      &lt;result column="keepAlive" property="keepAlive" jdbcType="BIT" /&gt;      &lt;result column="requireAuth" property="requireAuth" jdbcType="BIT" /&gt;    &lt;/association&gt;  &lt;/resultMap&gt;</code></pre><p>list对象 使用collection </p><pre><code>  &lt;resultMap id="menu2" type="org.javaboy.vhr.model.Menu" extends="baseResultMap"&gt;    &lt;collection property="children" ofType="com.aloneness.vhr.model.Menu"&gt;      &lt;id column="id2" property="id" jdbcType="INTEGER" /&gt;      &lt;result column="url2" property="url" jdbcType="VARCHAR" /&gt;      &lt;result column="path2" property="path" jdbcType="VARCHAR" /&gt;      &lt;result column="component2" property="component" jdbcType="VARCHAR" /&gt;      &lt;result column="name2" property="name" jdbcType="VARCHAR" /&gt;      &lt;result column="iconCls2" property="iconCls" jdbcType="VARCHAR" /&gt;      &lt;result column="parentId2" property="parentId" jdbcType="INTEGER" /&gt;      &lt;result column="enabled2" property="enabled" jdbcType="BIT" /&gt;      &lt;association property="meta" javaType="org.javaboy.vhr.model.Meta"&gt;        &lt;result column="keepAlive2" property="keepAlive" jdbcType="BIT" /&gt;        &lt;result column="requireAuth2" property="requireAuth" jdbcType="BIT" /&gt;      &lt;/association&gt;    &lt;/collection&gt;  &lt;/resultMap&gt;</code></pre><pre><code>  &lt;select id="getMenusByHrId" resultMap="menu2"&gt;    SELECT DISTINCT       m1.*,      m2.`id` AS id2,      m2.`component` AS component2,      m2.`enabled` AS enabled2,      m2.`iconCls` AS iconCls2,      m2.`keepAlive` AS keepAlive2,      m2.`name` AS name2,      m2.`parentId` AS parentId2,      m2.`requireAuth` AS requireAuth2,      m2.`path` AS path2     FROM      menu m1,      menu m2,      hr_role hrr,      menu_role mr     WHERE m1.`id` = m2.`parentId`       AND hrr.`hrid` = #{hrid} and hrr.`rid`=mr.`rid` and mr.`mid`=m2.`id` and m2.`enabled`=true order by m1.`id`,m2.`id`   &lt;/select&gt;</code></pre><h4 id="foreach标签"><a href="#foreach标签" class="headerlink" title="foreach标签"></a>foreach标签</h4><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>collection</td><td>用于迭代的集合，可以使用@Param标注</td></tr><tr><td>item</td><td>本次迭代的元素</td></tr><tr><td>open</td><td>语句的开始 ‘(‘</td></tr><tr><td>close</td><td>语句的结束 ‘)’</td></tr><tr><td>separator</td><td>每次迭代给sql语句后面加入字符 ‘,’</td></tr><tr><td>index</td><td>该元素指定的key</td></tr></tbody></table><h5 id="批量插入"><a href="#批量插入" class="headerlink" title="批量插入"></a>批量插入</h5><p>注意括号的位置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        （#{item}）<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span></code></pre><p>会解析成如下方式：<br>INSERT INTO user(user_name) VALUES(‘zhangsan’),(‘lisi’),(‘wangwu’)  </p><h5 id="构建in条件语句"><a href="#构建in条件语句" class="headerlink" title="构建in条件语句"></a>构建in条件语句</h5><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>foreach</span> <span class="token attr-name">collection</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>list<span class="token punctuation">"</span></span> <span class="token attr-name">item</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>item<span class="token punctuation">"</span></span> <span class="token attr-name">open</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(<span class="token punctuation">"</span></span> <span class="token attr-name">separator</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>,<span class="token punctuation">"</span></span> <span class="token attr-name">close</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        #{item}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>foreach</span><span class="token punctuation">></span></span></code></pre><p>会解析成如下方式：<br>SELECT * FROM user WHERE user_name in (‘zhangsan’,’lisi’,’wangwu’)</p><h4 id="trim标签"><a href="#trim标签" class="headerlink" title="trim标签"></a>trim标签</h4><p>一般用户去除sql语句中多余的and的关键字，逗号，或者给sql语句前拼接where、set以及values() 等前缀，或者添加) 等后缀，可用于选择性插入、更新、删除或者条件查询等操作。</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>prefix</td><td>给sql语句拼接的前缀</td></tr><tr><td>suffix</td><td>给sql语句拼接的后缀</td></tr><tr><td>prefixOverrides</td><td>去除sql语句前面的关键字或者字符，该关键字或者字符由prefixOverrides属性指定，假设该属性指定位and, 当sql语句的开头为and，trim标签将会去除and</td></tr><tr><td>suffixOverrides</td><td>去除sql语句后面的关键字或者字符，该关键字或者字符由prefixOverrides属性指定</td></tr></tbody></table><p>where标签可以完成类似的功能</p><h4 id="selectKey标签详解"><a href="#selectKey标签详解" class="headerlink" title="selectKey标签详解"></a>selectKey标签详解</h4><p>数据库主键包括自增和非自增，有时候新增一条数据不仅仅知道成功就行了，后边的逻辑可能还需要这个新增的主键，这时候再查询数据库就有点耗时力，我们可以采用selectKey来帮助我们获取新增的主键</p><h5 id="自增类型的主键获取"><a href="#自增类型的主键获取" class="headerlink" title="自增类型的主键获取"></a>自增类型的主键获取</h5><pre><code>&lt;insert id="insert" parameterType="com.example.wjtweb.pojo.Goods"&gt;    &lt;selectKey keyProperty="id" order="AFTER" resultType="Integer"&gt;        SELECT LAST_INSERT_ID()    &lt;/selectKey&gt;    INSERT INTO Goods (MID,GNAME,PRICE,AMOUNT,imageName)    VALUES (#{mid},#{gname},#{price},#{amount},#{imageName});&lt;/insert&gt;@Datapublic class Goods {    //自增主键    private Integer id;    private String mid;    private String gname;    private String price;    private String amount;    private String imageName;}</code></pre><ul><li>SELECT LAST_INSERT_ID(): MySQL的一个函数，得到刚insert进去记录的主键值，只适用于主键自增</li><li>keyProperty: 将查询到的主键值设置到Java对象的Id</li><li>order<ul><li>after 表示 SELECT LAST_INSERT_ID()在insert执行之后执行，多用于自增主键</li><li>before 表示 SELECT LAST_INSERT_ID()在insert执行之前执行，这样就拿不到主键了，不适合自增类型的主键</li></ul></li></ul><h5 id="非自增类型的主键获取"><a href="#非自增类型的主键获取" class="headerlink" title="非自增类型的主键获取"></a>非自增类型的主键获取</h5><pre><code>&lt;insert id="insert" parameterType="com.soft.mybatis.model.Customer"&gt;      &lt;!-- 跟自增主键方式相比，这里的不同之处只有两点                  1  insert语句需要写id字段了，并且 values里面也不能省略                  2 selectKey 的order属性需要写成BEFORE 因为这样才能将生成的uuid主键放入到model中，                  这样后面的insert的values里面的id才不会获取为空            跟自增主键相比就这点区别，当然了这里的获取主键id的方式为 select uuid()            当然也可以另写别生成函数。--&gt;      &lt;selectKey keyProperty="id" order="BEFORE" resultType="String"&gt;          select uuid()      &lt;/selectKey&gt;      insert into t_customer (id,c_name,c_sex,c_ceroNo,c_ceroType,c_age)      values (#{id},#{name},#{sex},#{ceroNo},#{ceroType},#{age})  &lt;/insert&gt;  </code></pre><ul><li>select uuid()：MySQL的一个函数，得到UUID唯一值</li></ul><h4 id="树型接口的处理"><a href="#树型接口的处理" class="headerlink" title="树型接口的处理"></a>树型接口的处理</h4><p>例如：部门管理</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAllDepartmentsByParentId<span class="token punctuation">"</span></span> <span class="token attr-name">resultMap</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DepartmentWithChildren<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    select * from department where parentId=#{pid};<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resultMap</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>DepartmentWithChildren<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.javaboy.vhr.model.Department<span class="token punctuation">"</span></span> <span class="token attr-name">extends</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BaseResultMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>collection</span> <span class="token attr-name">property</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>children<span class="token punctuation">"</span></span>                 <span class="token attr-name">ofType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.javaboy.vhr.model.Department<span class="token punctuation">"</span></span>                <span class="token attr-name">select</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.javaboy.vhr.mapper.DepartmentMapper.getAllDepartmentsByParentId<span class="token punctuation">"</span></span>                 <span class="token attr-name">column</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resultMap</span><span class="token punctuation">></span></span>List<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Department</span><span class="token punctuation">></span></span> getAllDepartmentsByParentId(Integer pid);</code></pre><pre><code>public class Department implements Serializable {    private Integer id;    private String name;    private Integer parentId;    private String depPath;    private Boolean enabled;    private Boolean isParent;    private List&lt;Department&gt; children = new ArrayList&lt;&gt;();    private Integer result;}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码整洁-消除if else</title>
      <link href="/2019/12/31/dai-ma-zheng-ji-xiao-chu-if-else/"/>
      <url>/2019/12/31/dai-ma-zheng-ji-xiao-chu-if-else/</url>
      
        <content type="html"><![CDATA[<h4 id="1-if-else-繁琐代码"><a href="#1-if-else-繁琐代码" class="headerlink" title="1. if else 繁琐代码"></a>1. if else 繁琐代码</h4><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">judge</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>        String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>roleName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ROLE_ROOT_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token string">"ROLE_ROOT_ADMIN: "</span><span class="token operator">+</span><span class="token string">"has AAA permission"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>roleName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ROLE_ORDER_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token string">"ROLE_ORDER_ADMIN: "</span><span class="token operator">+</span><span class="token string">"has BBB permission"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>roleName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ROLE_NORMAL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token string">"ROLE_NORMAL: "</span><span class="token operator">+</span><span class="token string">"has CCC permission"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            result <span class="token operator">=</span> <span class="token string">"XXX"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="2-使用枚举优化代码"><a href="#2-使用枚举优化代码" class="headerlink" title="2. 使用枚举优化代码"></a>2. 使用枚举优化代码</h4><ul><li>定义了一个公用接口 RoleOperation</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RoleOperation</span> <span class="token punctuation">{</span>    String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>定义枚举</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> RoleEnum <span class="token keyword">implements</span> <span class="token class-name">RoleOperation</span><span class="token punctuation">{</span>    ROLE_ROOT_ADMIN <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ROLE_ROOT_ADMIN: "</span><span class="token operator">+</span><span class="token string">"has AAA permission"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    ROLE_ORDER_ADMIN <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ROLE_ORDER_ADMIN: "</span><span class="token operator">+</span><span class="token string">"has BBB permission"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    ROLE_NORMAL <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"ROLE_NORMAL: "</span><span class="token operator">+</span><span class="token string">"has CCC permission"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    ROLE_OTHER <span class="token punctuation">{</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">"XXX"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>判断就可以很简单了</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">judge</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> RoleEnum<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="3-使用工厂模式"><a href="#3-使用工厂模式" class="headerlink" title="3. 使用工厂模式"></a>3. 使用工厂模式</h4><ul><li>定义各种角色</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RootAdminRole</span> <span class="token keyword">implements</span> <span class="token class-name">RoleOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RootAdminRole</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleName <span class="token operator">=</span> roleName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleName <span class="token operator">+</span> <span class="token string">"has AAA permission"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderAdminRole</span> <span class="token keyword">implements</span> <span class="token class-name">RoleOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">OrderAdminRole</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleName <span class="token operator">=</span> roleName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleName <span class="token operator">+</span> <span class="token string">"has BBB permission"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NormalAdminRole</span> <span class="token keyword">implements</span> <span class="token class-name">RoleOperation</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String roleName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NormalAdminRole</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleName <span class="token operator">=</span> roleName<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> roleName <span class="token operator">+</span> <span class="token string">"has CCC permission"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>定义工厂</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">static</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> RoleOperation<span class="token operator">></span> roleOperationMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        roleOperationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ROLE_ROOT_ADMIN"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RootAdminRole</span><span class="token punctuation">(</span><span class="token string">"ROLE_ROOT_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roleOperationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ROLE_ORDER_ADMIN"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RootAdminRole</span><span class="token punctuation">(</span><span class="token string">"ROLE_ORDER_ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        roleOperationMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"ROLE_NORMAL"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">RootAdminRole</span><span class="token punctuation">(</span><span class="token string">"ROLE_NORMAL"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> RoleOperation <span class="token function">getOp</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> roleOperationMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>判断就可以简单了</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">judge</span><span class="token punctuation">(</span>String roleName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> RoleFactory<span class="token punctuation">.</span><span class="token function">getOp</span><span class="token punctuation">(</span>roleName<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-使用策略模式"><a href="#4-使用策略模式" class="headerlink" title="4. 使用策略模式"></a>4. 使用策略模式</h4><ul><li>先定义一个 Context</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleContext</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> RoleOperation roleOperation<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RoleContext</span><span class="token punctuation">(</span>RoleOperation roleOperation<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>roleOperation <span class="token operator">=</span> roleOperation<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> roleOperation<span class="token punctuation">.</span><span class="token function">op</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>传入不同的角色就可以得到不同的操作结果</li></ul><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> String <span class="token function">judge</span><span class="token punctuation">(</span>RoleOperation roleOperation<span class="token punctuation">)</span><span class="token punctuation">{</span>        RoleContext roleContext <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleContext</span><span class="token punctuation">(</span>roleOperation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> roleContext<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        JudgeRole judgeRole <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JudgeRole</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String result1 <span class="token operator">=</span> judgeRole<span class="token punctuation">.</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RootAdminRole</span><span class="token punctuation">(</span><span class="token string">"ROOT_ADMIN_ROLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>        String result2 <span class="token operator">=</span> judgeRole<span class="token punctuation">.</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OrderAdminRole</span><span class="token punctuation">(</span><span class="token string">"ORDER_ADMIN_ROLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span>        String result3 <span class="token operator">=</span> judgeRole<span class="token punctuation">.</span><span class="token function">judge</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">NormalAdminRole</span><span class="token punctuation">(</span><span class="token string">"NORMAL_ADMIN_ROLE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码整洁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码整洁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java代码整洁-复杂的参数校验</title>
      <link href="/2019/12/31/dai-ma-zheng-ji-fu-za-de-can-shu-xiao-yan/"/>
      <url>/2019/12/31/dai-ma-zheng-ji-fu-za-de-can-shu-xiao-yan/</url>
      
        <content type="html"><![CDATA[<h4 id="1-场景"><a href="#1-场景" class="headerlink" title="1. 场景"></a>1. 场景</h4><p>一个请求往往会传入许多参数，但是都需要进行校验，但是总不能把所有参数进行 if 校验，这非常繁琐，我们可以使用注解更简单的实现</p><h4 id="2-注解进行校验"><a href="#2-注解进行校验" class="headerlink" title="2. 注解进行校验"></a>2. 注解进行校验</h4><ul><li>对传入的实体类的字段加入注解</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"姓名为null"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"姓名不能为空字符串"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"分数不能为null"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Min</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"分数只能在0到100之间"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Max</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"分数只能在0到100之间"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> Integer score<span class="token punctuation">;</span>    <span class="token annotation punctuation">@NotNull</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"手机号不能为null"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@NotEmpty</span><span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"手机号不能为空字符串"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@Length</span><span class="token punctuation">(</span>min <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> max <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">,</span> message <span class="token operator">=</span> <span class="token string">"手机号长度只能为11位"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> String mobile<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ul><li>在对象入口处加入<code>@Vaild</code>注解</li></ul><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"addStudent"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">addStudent</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> <span class="token annotation punctuation">@Valid</span> Student student<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>发送请求的时候就会报 400 的错误<br><img src="https://github.com/solitary-s/image_store/blob/master/Java%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81/400Error.jpg?raw=true" alt=""></li></ul><h4 id="3-配置全局统一异常拦截器"><a href="#3-配置全局统一异常拦截器" class="headerlink" title="3. 配置全局统一异常拦截器"></a>3. 配置全局统一异常拦截器</h4><p>上述返回的信息太复杂，我们可以配置统一异常拦截器，简化返回的错误信息</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ControllerAdvice</span><span class="token annotation punctuation">@ResponseBody</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GlobalExceptionInterceptor</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ExceptionHandler</span><span class="token punctuation">(</span>value <span class="token operator">=</span> Exception<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">exceptionHandler</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>        String failMsg <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>e <span class="token keyword">instanceof</span> <span class="token class-name">MethodArgumentNotValidException</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            failMsg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>MethodArgumentNotValidException<span class="token punctuation">)</span> e<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBindingResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFieldError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> failMsg<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ul><li>直接返回错误信息</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 代码整洁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码整洁 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式-单例模式的八种写法</title>
      <link href="/2019/12/30/she-ji-mo-shi-dan-li-mo-shi-de-ba-chong-xie-fa/"/>
      <url>/2019/12/30/she-ji-mo-shi-dan-li-mo-shi-de-ba-chong-xie-fa/</url>
      
        <content type="html"><![CDATA[<h4 id="1、饿汉式-静态常量-可用"><a href="#1、饿汉式-静态常量-可用" class="headerlink" title="1、饿汉式(静态常量)[可用]"></a>1、饿汉式(静态常量)[可用]</h4><ul><li>优点：这种写法比较简单，就是在类装载的时候就完成实例化。避免了线程同步问题。</li><li>缺点：在类装载的时候就完成实例化，没有达到 Lazy Loading 的效果。如果从始至终从未使用过这个实例，则会造成内存的浪费。</li></ul><pre><code>public class Singleton {    private final static Singleton INSTANCE = new Singleton();    private Singleton(){}    public static Singleton getInstance(){        return INSTANCE;    }}</code></pre><h4 id="2、饿汉式-静态代码块-可用"><a href="#2、饿汉式-静态代码块-可用" class="headerlink" title="2、饿汉式(静态代码块)[可用]"></a>2、饿汉式(静态代码块)[可用]</h4><p>这种方式和上面的方式其实类似，只不过将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面是一样的。</p><pre><code>public class Singleton {    private static Singleton instance;    static {        instance = new Singleton();    }    private Singleton(){}    public static Singleton getInstance(){        return instance;    }}</code></pre><h4 id="3、懒汉式-线程不安全-不可用"><a href="#3、懒汉式-线程不安全-不可用" class="headerlink" title="3、懒汉式(线程不安全)[不可用]"></a>3、懒汉式(线程不安全)[不可用]</h4><p>这种写法起到了 Lazy Loading 的效果，但是只能在单线程下使用。如果在多线程下，一个线程进入了 if (singleton == null) 判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可使用这种方式</p><pre><code>public class Singleton {    private static Singleton instance;    private Singleton(){}    public static Singleton getInstance(){        if(instance == null){            instance= new Singleton();        }        return instance;    }}</code></pre><h4 id="4、懒汉式-线程安全，同步方法-不推荐用"><a href="#4、懒汉式-线程安全，同步方法-不推荐用" class="headerlink" title="4、懒汉式(线程安全，同步方法)[不推荐用]"></a>4、懒汉式(线程安全，同步方法)[不推荐用]</h4><p>解决上面第三种实现方式的线程不安全问题，做个线程同步就可以了，于是就对 getInstance() 方法进行了线程同步。</p><ul><li>缺点：效率太低了，每个线程在想获得类的实例时候，执行 getInstance() 方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接 return 就行了。方法进行同步效率太低要改进</li></ul><pre><code>package com.aloneness.designModel;public class Singleton {    private static Singleton instance;    private Singleton(){}    public static synchronized Singleton getInstance(){        if(instance == null){            instance= new Singleton();        }        return instance;    }}</code></pre><h4 id="5-懒汉式-线程安全，同步代码块-不可用"><a href="#5-懒汉式-线程安全，同步代码块-不可用" class="headerlink" title="5. 懒汉式(线程安全，同步代码块)[不可用]"></a>5. 懒汉式(线程安全，同步代码块)[不可用]</h4><p>由于第四种实现方式同步效率太低，所以摒弃同步方法，改为同步产生实例化的的代码块。但是这种同步并不能起到线程同步的作用。跟第 3 种实现方式遇到的情形一致，假如一个线程进入了 if (singleton == null) 判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</p><pre><code>public class Singleton {    private static Singleton instance;    private Singleton(){}    public static Singleton getInstance(){        if(instance == null){            synchronized (Singleton.class){                instance= new Singleton();            }        }        return instance;    }}</code></pre><h4 id="6-双重检查-推荐用"><a href="#6-双重检查-推荐用" class="headerlink" title="6.双重检查[推荐用]"></a>6.双重检查[推荐用]</h4><p>Double-Check 概念对于多线程开发者来说不会陌生，如代码中所示，我们进行了两次 if (singleton == null) 检查，这样就可以保证线程安全了。这样，实例化代码只用执行一次，后面再次访问时，判断 if (singleton == null)，直接 return 实例化对象。</p><ul><li>优点：线程安全；延迟加载；效率较高。</li></ul><pre><code>package com.aloneness.designModel;public class Singleton {    private static volatile Singleton instance;    private Singleton(){}    public static Singleton getInstance(){        if(instance == null){            synchronized (Singleton.class){                if(instance == null){                    instance= new Singleton();                }            }        }        return instance;    }}</code></pre><h4 id="7-静态内部类-推荐用"><a href="#7-静态内部类-推荐用" class="headerlink" title="7.静态内部类[推荐用]"></a>7.静态内部类[推荐用]</h4><p>这种方式跟饿汉式方式采用的机制类似，但又有不同。两者都是采用了类装载的机制来保证初始化实例时只有一个线程。不同的地方在饿汉式方式是只要 Singleton 类被装载就会实例化，没有 Lazy-Loading 的作用，而静态内部类方式在 Singleton 类被装载时并不会立即实例化，而是在需要实例化时，调用 getInstance 方法，才会装载 SingletonInstance 类，从而完成 Singleton 的实例化。<br>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM 帮助我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</p><ul><li>优点：避免了线程不安全，延迟加载，效率高</li></ul><pre><code>public class Singleton {    private Singleton(){}    private static class SingletonInstance{        private static final Singleton INSTANCE = new Singleton();    }    public static Singleton getInstance(){        return SingletonInstance.INSTANCE;    }}</code></pre><h4 id="8-枚举-推荐用"><a href="#8-枚举-推荐用" class="headerlink" title="8. 枚举[推荐用]"></a>8. 枚举[推荐用]</h4><p>借助 JDK1.5 中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。可能是因为枚举在 JDK1.5 中才添加，所以在实际项目开发中，很少见人这么写过</p><pre><code>public enum Singleton {    INSTANCE;    public void whateverMethod() {    }}</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java8-LocalDateTime</title>
      <link href="/2019/12/30/java8-localdatetime/"/>
      <url>/2019/12/30/java8-localdatetime/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Date类的难以使用"><a href="#1-Date类的难以使用" class="headerlink" title="1. Date类的难以使用"></a>1. Date类的难以使用</h4><ul><li>难以读懂返回的结果<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalStudy</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Date date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前时间"</span> <span class="token operator">+</span> date<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 当前时间Mon Dec 30 17:22:22 CST 2019</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"年份"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 年份119</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"月份"</span> <span class="token operator">+</span> date<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 月份11</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>太多的方法已被弃用，构造函数也被弃用<br><img src="https://github.com/solitary-s/image_store/blob/master/java8/localDateTime/java8-localDateTime.jpg?raw=true" alt=""></li></ul><h4 id="2-LocalDateTime"><a href="#2-LocalDateTime" class="headerlink" title="2. LocalDateTime"></a>2. LocalDateTime</h4><ul><li>获取当前时刻非常直观<pre><code>public class BigDecimalStudy {  public static void main(String[] args) {      LocalDateTime localDateTime = LocalDateTime.now();      System.out.println("当前时间: " + localDateTime);      System.out.println("年: " + localDateTime.getYear());      System.out.println("月: " + localDateTime.getMonth());      System.out.println("日: " + localDateTime.getDayOfMonth());      System.out.println("时: " + localDateTime.getHour());      System.out.println("分: " + localDateTime.getMinute());      System.out.println("秒: " + localDateTime.getSecond());  }}结果为：当前时间: 2019-12-30T17:55:22.574年: 2019月: DECEMBER日: 30时: 17分: 55秒: 22</code></pre></li><li>构造一个指定的日期非常方便<pre class=" language-Java"><code class="language-Java">public class BigDecimalStudy {  public static void main(String[] args) {      LocalDateTime localDateTime = LocalDateTime.of(2019, Month.DECEMBER, 12, 8, 12, 12);      System.out.println(localDateTime);  }}</code></pre></li></ul><pre><code>- 修改日期也非常的方便```javapublic class BigDecimalStudy {    public static void main(String[] args) {        LocalDateTime localDateTime = LocalDateTime.of(2019, Month.DECEMBER, 12, 8, 12, 12);        System.out.println(localDateTime.minusYears(1)); // 减少一年 2019-12-12 08:12:12        System.out.println(localDateTime.plusDays(1)); // 增加一天 2018-12-12T08:12:12        System.out.println(localDateTime.withYear(2020)); // 直接修改年份 2020-12-12T08:12:12    }}</code></pre><ul><li>格式化日期<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalStudy</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      LocalDateTime localDateTime <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      String result1 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>ISO_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>      String result2 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span>BASIC_ISO_DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>      String result3 <span class="token operator">=</span> localDateTime<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy/MM/DD"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2020-01-01</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 20200101</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2020/01/01</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>时间反解析<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalStudy</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      LocalDateTime time <span class="token operator">=</span> LocalDateTime<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">"2019--12--12 11:12"</span><span class="token punctuation">,</span> DateTimeFormatter<span class="token punctuation">.</span><span class="token function">ofPattern</span><span class="token punctuation">(</span><span class="token string">"yyyy--MM--dd HH:mm"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2019-12-12T11:12</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="3-线程安全性问题"><a href="#3-线程安全性问题" class="headerlink" title="3. 线程安全性问题"></a>3. 线程安全性问题</h4></li><li>Date时间类是可变类，线程不安全</li><li>LocalDateTime是线程安全的</li><li>SimpleDateFormat也是线程不安全的</li><li>DateTimeFormatter，是线程安全的</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java8 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java8 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java基础-BigDecimal</title>
      <link href="/2019/12/30/java-ji-chu-bigdecimal/"/>
      <url>/2019/12/30/java-ji-chu-bigdecimal/</url>
      
        <content type="html"><![CDATA[<h4 id="1-为什么使用BigDecimal"><a href="#1-为什么使用BigDecimal" class="headerlink" title="1. 为什么使用BigDecimal"></a>1. 为什么使用BigDecimal</h4><ul><li>关于浮点数在计算机是无法准确表示的，例如，0.1 只能表示一个近似值</li><li>浮点数double和float的计算结果偶尔会出现不确定性<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalStudy</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">double</span> num1 <span class="token operator">=</span> <span class="token number">0.000001</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 实际结果是 9.999999999999999E-5，而不是0.0001</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1 <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>因此，double和float并不适合精确的计算，在商业计算中需要精确的计算，需要使用java.math.BigDecimal<h4 id="2-关于BigDecimal"><a href="#2-关于BigDecimal" class="headerlink" title="2. 关于BigDecimal"></a>2. 关于BigDecimal</h4></li><li>BigDecimal的构造方法有很多，但最好使用new BigDecimal(String val)</li><li>BigDecimal的加减乘除<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalStudy</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      BigDecimal num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"0.001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0.100</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">divide</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 0.00001</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 100.001</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">subtract</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// -99.999</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>BigDecimal的比较大小<pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BigDecimalStudy</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      BigDecimal num1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100.01"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// a > b</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100.01"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a = b</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"100.02"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// a &lt; b</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的安装和基本使用</title>
      <link href="/2019/11/30/hexo-de-an-zhuang-he-ji-ben-shi-yong/"/>
      <url>/2019/11/30/hexo-de-an-zhuang-he-ji-ben-shi-yong/</url>
      
        <content type="html"><![CDATA[<h3 id="Hexo-的安装"><a href="#Hexo-的安装" class="headerlink" title="Hexo 的安装"></a>Hexo 的安装</h3><p>前提安装 node.js，自带 npm</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> -g hexo  <span class="token comment" spellcheck="true"># 全局安装Hexo</span></code></pre><h3 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h3><p>执行以下命令，初始化文件夹，会生成一些基本的文件夹</p><pre class=" language-bash"><code class="language-bash">$ hexo init</code></pre><h3 id="修改-Hexo-的主题"><a href="#修改-Hexo-的主题" class="headerlink" title="修改 Hexo 的主题"></a>修改 Hexo 的主题</h3><p>推荐一款主题 pure，地址：<a href="https://github.com/cofess/hexo-theme-pure" target="_blank" rel="noopener">https://github.com/cofess/hexo-theme-pure</a></p><p>hexo 的主题官网 <a href="https://hexo.io/themes/" target="_blank" rel="noopener">https://hexo.io/themes/</a></p><ol><li>将主题下载到 hexo 的 theme 目录下</li><li>修改_config.yml 文件中的 theme 字段 例如 theme: landscape</li><li>执行 hexo clean 清理一下 public 内容，然后在生成和发布</li></ol><h3 id="Hexo-更换主题注意事项"><a href="#Hexo-更换主题注意事项" class="headerlink" title="Hexo 更换主题注意事项"></a>Hexo 更换主题注意事项</h3><p>更换主题时出现<code>WARN No layout: index.html</code>，因为 theme: 字段和对应相应的文件夹不一致，主题改为和文件夹名一直即可</p><h3 id="Hexo-推送到-gitee-上"><a href="#Hexo-推送到-gitee-上" class="headerlink" title="Hexo 推送到 gitee 上"></a>Hexo 推送到 gitee 上</h3><p>用 Github 作为仓库，访问速度实在太慢了，这里推荐使用 Gitee，速度较快</p><ol><li><p>安装 hexo-git 插件</p><pre class=" language-xml"><code class="language-xml"> npm install hexo-deployer-git --save</code></pre></li><li><p>在 Git 创建仓库，注意仓库名字和用户名称要一致，否则 Gitee Pages 会创建错误，样式路径有问题</p></li><li><p>修改配置文件_config.yml</p><pre class=" language-xml"><code class="language-xml">deploy:  type: git  repository: https://gitee.com/aloneness/aloneness.git  branch: master</code></pre></li><li><p>推送完成后点击，点击服务-&gt;Gitee Pages 生成，每次推送完成后都需要手工更新才能生效</p></li></ol><h3 id="Hexo-基本命令"><a href="#Hexo-基本命令" class="headerlink" title="Hexo 基本命令"></a>Hexo 基本命令</h3><p>最好在 git bash 命令窗口输入 在 HEXO 根目录输入即可</p><pre><code>hexo new "My New Post"  #新建文章hexo new page "pageName" #新建页面hexo clean # 清理hexo generate = hexo g #生成静态页面至public目录hexo server = hexo s #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）hexo deploy hexo d #部署到GitHubhexo help  # 查看帮助hexo version  #查看Hexo的版本#组合命令hexo s -g #生成并本地预览hexo d -g #生成并上传</code></pre><h3 id="Hexo-写文章"><a href="#Hexo-写文章" class="headerlink" title="Hexo 写文章"></a>Hexo 写文章</h3><p>文章的格式</p><pre><code>---title: postName #文章页面上的显示名称，一般是中文date: 2013-12-02 15:30:16 #文章生成时间，一般不改，当然也可以任意修改categories: 默认分类 #分类tags: [tag1,tag2,tag3] #文章标签，可空，多标签请用格式，注意:后面有个空格description: 附加一段文章摘要，字数最好在140字以内，会出现在meta的description里面---以下是正文</code></pre><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p><strong>每次远程推动，github 中的 domain 都会消失</strong><br>解决： 需要在<code>source</code>目录下新建一个文件<code>CNAME</code>(无需后缀)</p><h3 id="Window-批处理命令"><a href="#Window-批处理命令" class="headerlink" title="Window 批处理命令"></a>Window 批处理命令</h3><h4 id="本地部署"><a href="#本地部署" class="headerlink" title="本地部署"></a>本地部署</h4><pre class=" language-bash"><code class="language-bash">@echo offD:<span class="token function">cd</span> D:\code\blog\hexohexo clean<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo s</code></pre><h4 id="部署到-Gitee"><a href="#部署到-Gitee" class="headerlink" title="部署到 Gitee"></a>部署到 Gitee</h4><pre class=" language-bash"><code class="language-bash">@echo offD:<span class="token function">cd</span> D:\code\blog\hexohexo clean<span class="token operator">&amp;&amp;</span>hexo g<span class="token operator">&amp;&amp;</span>hexo d</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
